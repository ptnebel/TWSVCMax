<?xml version="1.0" encoding="UTF-8"?>
<Scontrol xmlns="http://soap.sforce.com/2006/04/metadata">
    <contentSource>HTML</contentSource>
    <description>Gets the latitude &amp; longitude coordinates of an valid address.</description>
    <encodingKey>UTF-8</encodingKey>
    <fileContent></fileContent>
    <fileName>SVMXC_Library.js</fileName>
    <name>SVMXC_ValidateIBAddress</name>
    <supportsCaching>true</supportsCaching>
</Scontrol>
