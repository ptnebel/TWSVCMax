<?xml version="1.0" encoding="UTF-8"?>
<Scontrol xmlns="http://soap.sforce.com/2006/04/metadata">
    <contentSource>HTML</contentSource>
    <encodingKey>UTF-8</encodingKey>
    <fileContent>var InstProdId = "";
var retURL = "";
var MsgList = new Array();
var TopIbId = "";
var HeaderDone = false;
var ObjType = "";
var CurrObjId = "";
var entrownum = 0;
var EntCaseId = "";
var EntSVOId = "";
var EntIbId = "";
var EntProdId = "";
var AcctId = "";
var MatchAccount = true;
function SVMXC_EN_ValidatePermissions()
{
var ShowEnt =true;
try{
 var resultServiceMax_Settings = sforce.connection.describeSObject("SVMXC__ServiceMax_Settings__c"); 
 var resultProduct2 = sforce.connection.describeSObject("Product2");
 var resultSVMXC__Installed_Product__c  = sforce.connection.describeSObject("SVMXC__Installed_Product__c");
 var resultCase  = sforce.connection.describeSObject("Case");
 var resultSVMXC__Entitlement_History__c = sforce.connection.describeSObject("SVMXC__Entitlement_History__c");
 var resultSVMXC__Service_Contract__c = sforce.connection.describeSObject("SVMXC__Service_Contract__c");
 var resultSVMXC__Service_Contract_Services__c = sforce.connection.describeSObject("SVMXC__Service_Contract_Services__c");
 var resultSVMXC__Service_Contract_Contacts__c = sforce.connection.describeSObject("SVMXC__Service_Contract_Contacts__c");
 var resultSVMXC__Service_Contract_Sites__c = sforce.connection.describeSObject("SVMXC__Service_Contract_Sites__c");
 var resultSVMXC__Warranty__c = sforce.connection.describeSObject("SVMXC__Warranty__c");
 var resultSVMXC__Service_Contract_Products__c = sforce.connection.describeSObject("SVMXC__Service_Contract_Products__c");
 var resultSVMXC__Service_Level__c = sforce.connection.describeSObject("SVMXC__Service_Level__c");
 
 	
		// Check Entitlement Button
 if  ((resultProduct2.queryable  == "false") ||
 	(resultSVMXC__Service_Contract__c.queryable == "false") ||
	(resultSVMXC__Service_Contract_Services__c.queryable == "false") ||
	(resultSVMXC__Service_Contract_Contacts__c.queryable == "false") ||
	(resultSVMXC__Service_Contract_Sites__c.queryable == "false") ||
	(resultSVMXC__Warranty__c.queryable == "false") ||
	(resultSVMXC__Service_Contract_Products__c.queryable == "false") ||
	(resultSVMXC__Service_Level__c.queryable == "false") )
	{
	document.forms['ent_form'].LAB001.disabled=true;
	}
 else
	{
	document.forms['ent_form'].LAB001.disabled=false;
	}
		// Save Entitlement Button
    document.forms['ent_form'].LAB002.disabled = ((resultCase.updateable == "false") || 
						     (resultSVMXC__Entitlement_History__c.createable == "false")||
						     (resultSVMXC__Entitlement_History__c.updateable == "false")) ? true : false;
	
		//Save Product Button	
	if (resultCase.updateable  == "false")
	{
	document.forms['ent_form'].LAB003.disabled=true;
	}
	else
	{
	document.forms['ent_form'].LAB003.disabled=false;		
	}
	
	
	
	document.forms['ent_form'].LAB004.disabled = (resultSVMXC__Installed_Product__c.queryable == "false") ? true : false;
	
	if  (resultServiceMax_Settings.queryable  == "false")
	    {
	    document.getElementById('expd_ent').disabled = true;
	    document.getElementById('fut_ent').disabled = true;
	    }
	
	if  (resultProduct2.queryable  == "false") { document.getElementById('product').disabled = true; }
	
	if  (resultSVMXC__Installed_Product__c.queryable == "false") { document.getElementById('serial').disabled = true; }

		//SVMXC_EN_ShowEntitlement
	if  ((resultServiceMax_Settings.queryable == "false") ||  
		(resultProduct2.queryable  == "false") ||
		(resultSVMXC__Installed_Product__c.queryable == "false")||
		(resultCase.queryable  == "false") || 
		(resultSVMXC__Entitlement_History__c.queryable == "false"))
	{
		ShowEnt =false;	
	}
	else
	{
		ShowEnt =true;	
	}
	//alert('ShowEnt  : '+ShowEnt);
 
}catch(e){alert(e);}
return ShowEnt;
}
// Main entry point for entitlement called on page load
// Setup the entitlement screen
function SVMXC_EN_ShowEntitlement(objid, uid, objtype)
{
    SVMXC_InitMessageList("EVERSC1");
    SVMXC_EN_SetLabels();
    CurrObjId = objid;
    ObjType = objtype;

    UserId = uid;
	//var x =SVMXC_EN_ValidatePermissions();
//	if (SVMXC_EN_ValidatePermissions()==true)
  // {
    SVMXC_EN_SetEntitlementFilters();
    SVMXC_EN_SetLookupTypes();
    SVMXC_EN_PopulateExistingData(objtype, objid);
	//}
}
/*================================================================================================*/
// Set the field labels from Case object definition by matching label's name attribute to SFDC field name
function SVMXC_EN_SetLabels()
{
    var labels = document.getElementsByTagName('label');
    for (var i = 0; i < labels.length; i++)
	{
	var f = labels[i];
	if (MsgList[f.name])
	    f.innerText = MsgList[f.name];
	}
    var elems = document.forms['ent_form'].elements;
    for (var j = 0; j < elems.length; j++)
	{
	var f = elems[j];
	if ((f.type == 'button' || f.type == 'checkbox') && MsgList[f.name])
	    f.value = MsgList[f.name];
	}
    return true;
}
/*================================================================================================*/
// Use the org-wide defaults for entitlement filters (future, expired)
function SVMXC_EN_SetEntitlementFilters()
{
    var soql1 = "SELECT SVMXC__Show_Expired_Entitlements__c, SVMXC__Show_Future_Entitlements__c, " +
    		"SVMXC__Allow_Entitlement_Filters__c, SVMXC__Match_Account_In_Entitlement__c FROM SVMXC__ServiceMax_Settings__c";
    //var soql1 = "SELECT Show_Expired_Entitlements__c, Show_Future_Entitlements__c, " +
    //		"Allow_Entitlement_Filters__c, Match_Account_In_Entitlement__c FROM SVMXC__ServiceMax_Settings__c";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size > 0)
	{
	var rec1 = qr1.getArray("records")[0];

	if (rec1.SVMXC__Match_Account_In_Entitlement__c && rec1.SVMXC__Match_Account_In_Entitlement__c == "false")
	    MatchAccount = false;

	if (rec1.SVMXC__Show_Expired_Entitlements__c == "true")
	    document.getElementById('expd_ent').checked = true;
	else
	    document.getElementById('expd_ent').checked = false;

	if (rec1.SVMXC__Show_Future_Entitlements__c == "true")
	    document.getElementById('fut_ent').checked = true;
	else
	    document.getElementById('fut_ent').checked = false;

	if (rec1.SVMXC__Allow_Entitlement_Filters__c == "false")
	    {
	    document.getElementById('expd_ent').disabled = true;
	    document.getElementById('fut_ent').disabled = true;
	    }
	}
    else
	{
	document.getElementById('expd_ent').checked = false;
	document.getElementById('fut_ent').checked = false;
	document.getElementById('expd_ent').disabled = true;
	document.getElementById('fut_ent').disabled = true;
	}
    return true;
}
/*================================================================================================*/
// We use SFDC's standard lookup popup which requires the 3-digit object code (prefix)
// The object prefix may wary in each SFDC org - it is populated in hidden fields on the form
// for the lookup to work properly
function SVMXC_EN_SetLookupTypes()
{
    var prodobj = sforce.connection.describeSObject("Product2");
    var ibobj = sforce.connection.describeSObject("SVMXC__Installed_Product__c");

    document.getElementById("product_lktp").value = prodobj.keyPrefix;
    document.getElementById("serial_lktp").value = ibobj.keyPrefix;
}
/*================================================================================================*/
// Show existing data on the entitlement form
function SVMXC_EN_PopulateExistingData(objtype, objid)
{
    if (objtype == 'CASE')
	{
	EntCaseId = objid;
	var soql1 = "SELECT AccountId, SVMXC__Product__c, SVMXC__Product__r.Name, " +
		    "SVMXC__Component__c, SVMXC__Component__r.SVMXC__Serial_Lot_Number__c, SVMXC__Component__r.SVMXC__Product__c, " +
		    "SVMXC__Top_Level__c, SVMXC__Top_Level__r.SVMXC__Serial_Lot_Number__c, " +
		    "SVMXC__Top_Level__r.SVMXC__Product__c FROM Case WHERE Id = '" + objid + "'";
	var qr1 = sforce.connection.query(soql1);
	var caserec = qr1.getArray("records")[0];
	AcctId = caserec.AccountId;
	if(caserec.SVMXC__Product__r)
	    {
	    document.getElementById("product").value = caserec.SVMXC__Product__r.Name;
	    document.getElementById("product_lkid").value = caserec.SVMXC__Product__c;
	    }
	if (caserec.SVMXC__Component__c && caserec.SVMXC__Component__c.length > 0)
	    {
	    document.getElementById("serial").value = caserec.SVMXC__Component__r.SVMXC__Serial_Lot_Number__c;
	    document.getElementById("serial_lkid").value = caserec.SVMXC__Component__c;
	    document.getElementById("ibprodid").value = caserec.SVMXC__Component__r.SVMXC__Product__c;
	    }
	if (caserec.SVMXC__Top_Level__c && caserec.SVMXC__Top_Level__c.length > 0)
	    {
	    document.getElementById("top_serial").value = caserec.SVMXC__Top_Level__r.SVMXC__Serial_Lot_Number__c;
	    document.getElementById("top_serial_lkid").value = caserec.SVMXC__Top_Level__c;
	    if (caserec.SVMXC__Top_Level__r.SVMXC__Product__c && caserec.SVMXC__Top_Level__r.SVMXC__Product__c.length > 0)
		{
		var soql2 = "SELECT Id, Name FROM Product2 WHERE Id = '" + caserec.SVMXC__Top_Level__r.SVMXC__Product__c + "'";
		var qr2 = sforce.connection.query(soql2);
		if (qr2.size > 0)
		    {
		    var prec = qr2.getArray("records")[0];
		    document.getElementById("top_product").value = prec.Name;
		    document.getElementById("top_product_lkid").value = prec.Id;
		    }
		}
	    }
	}
    else		// The parent entitled object is a Service Order
	{
    	EntSVOId = objid;
	var soql2 = "SELECT SVMXP__Company__c, SVMXP__Component__c, SVMXP__Component__r.SVMXC__Product__c, " +
		    "SVMXP__Component__r.SVMXC__Serial_Lot_Number__c, SVMXP__Top_Level__c, " +
		    "SVMXP__Top_Level__r.SVMXC__Serial_Lot_Number__c, SVMXP__Top_Level__r.SVMXC__Product__c " +
		    "FROM SVMXC__Service_Order__c WHERE Id = '" + objid + "'";
	var qr2 = sforce.connection.query(soql2);
	var svorec = qr2.getArray("records")[0];
	AcctId = svorec.SVMXP__Company__c;

	if (svorec.SVMXP__Component__c && svorec.SVMXP__Component__c.length > 0)
	    {
	    document.getElementById("serial").value = svorec.SVMXP__Component__r.SVMXC__Serial_Lot_Number__c;
	    document.getElementById("serial_lkid").value = svorec.SVMXP__Component__c;

	    if (svorec.SVMXP__Component__r.SVMXC__Product__c && svorec.SVMXP__Component__r.SVMXC__Product__c.length > 0)
		{
		var soqlp1 = "SELECT Id, Name FROM Product2 WHERE Id = '" + svorec.SVMXP__Component__r.SVMXC__Product__c + "'";
		var qrp1 = sforce.connection.query(soqlp1);
		if (qrp1.size > 0)
		    {
		    var prec1 = qrp1.getArray("records")[0];
		    document.getElementById("product").value = prec1.Name;
		    document.getElementById("ibprodid").value = prec1.Id;
		    document.getElementById("product_lkid").value = prec1.Id;
		    }
		}
	    }
	if (svorec.SVMXP__Top_Level__c && svorec.SVMXP__Top_Level__c.length > 0)
	    {
	    document.getElementById("top_serial").value = svorec.SVMXP__Top_Level__r.SVMXC__Serial_Lot_Number__c;
	    document.getElementById("top_serial_lkid").value = svorec.SVMXP__Top_Level__c;

	    if (svorec.SVMXP__Top_Level__r.SVMXC__Product__c && svorec.SVMXP__Top_Level__r.SVMXC__Product__c.length > 0)
		{
		var soqlp2 = "SELECT Id, Name FROM Product2 WHERE Id = '" + svorec.SVMXP__Top_Level__r.SVMXC__Product__c + "'";
		var qrp2 = sforce.connection.query(soqlp2);
		if (qrp2.size > 0)
		    {
		    var prec2 = qrp2.getArray("records")[0];
		    document.getElementById("top_product").value = prec2.Name;
		    document.getElementById("top_product_lkid").value = prec2.Id;
		    }
		}
	    }
	}

    		// Check if the case/SVO is entitled already.
		// Display entitlement information
    var soql3 = "SELECT SVMXC__Date_of_entitlement__c, SVMXC__Start_Date__c, SVMXC__End_Date__c, " +
		"SVMXC__Entitlement_Notes__c, SVMXC__Warranty__c, SVMXC__Warranty__r.Name, " +
		"SVMXC__Service_Contract__c, SVMXC__Service_Contract__r.Name " +
		"FROM SVMXC__Entitlement_History__c WHERE SVMXC__Inactive_Date__c = null AND ";
    if (objtype == 'CASE')
    	soql3 += "SVMXC__Case__c = '" + EntCaseId + "'";
    else
    	soql3 += "SVMXP__Service_Order__c = '" + EntSVOId + "'";
    var qr3 = sforce.connection.query(soql3);
    if (qr3.size > 0)
    	{
	var entrec = qr3.getArray("records")[0];

	if (entrec.SVMXC__Entitlement_notes__c)
	    document.getElementById("ent_notes").value = entrec.SVMXC__Entitlement_notes__c;

	var ent_date = entrec.SVMXC__Date_of_entitlement__c;
	var dc = ent_date.split('-', 3);
	var d = new Date(dc[0], dc[1] - 1, dc[2]);
	var dfmt = parent.UserContext.dateFormat;
	document.getElementById("ent_date").innerHTML = DateUtil.formatDate(d, dfmt);
	if (entrec.SVMXC__Warranty__c)
	    document.getElementById("ent_warr").innerHTML = entrec.SVMXC__Warranty__r.Name;
	if (entrec.SVMXC__Service_Contract__c)
	    document.getElementById("ent_sc").innerHTML = entrec.SVMXC__Service_Contract__r.Name;

	var ent_start_date = entrec.SVMXC__Start_Date__c;
	dc = ent_start_date.split('-', 3);
	d = new Date(dc[0], dc[1] - 1, dc[2]);
	dfmt = parent.UserContext.dateFormat;
	document.getElementById("ent_start_date").innerHTML = DateUtil.formatDate(d, dfmt);

	var ent_end_date = entrec.SVMXC__End_Date__c;
	dc = ent_end_date.split('-', 3);
	d = new Date(dc[0], dc[1] - 1, dc[2]);
	dfmt = parent.UserContext.dateFormat;
	document.getElementById("ent_end_date").innerHTML = DateUtil.formatDate(d, dfmt);

	document.getElementById("entinfo").style.display = 'block'; 
	}
    else
	document.getElementById('entinfo').style.display = 'none'; 

    return true;
}
/*================================================================================================*/
// Process the event of exiting serial number
// Populate product name & Id
function SVMXC_EN_ExitSerial()
{
    found = true;
    var lkid = document.getElementById("serial_lkid").value;
    if(lkid.length > 0 && lkid != EntIbId)
    	{
	document.getElementById("top_product").value = "";
	document.getElementById("top_product_lkid").value = "";
	document.getElementById("top_serial").value = "";
	document.getElementById("top_serial_lkid").value = "";

	var soql1 = "SELECT SVMXC__Product__c, SVMXC__Product__r.Name, SVMXC__Top_Level__c, " +
		    "SVMXC__Top_Level__r.SVMXC__Serial_Lot_Number__c, SVMXC__Top_Level__r.SVMXC__Product__c " +
		    "FROM SVMXC__Installed_Product__c WHERE Id = '" + lkid + "'";
	var qr1 = sforce.connection.query(soql1);
	if (qr1 && qr1.size > 0)
	    {
	    var rec1 = qr1.getArray("records")[0];
	    document.getElementById("product").value = rec1.SVMXC__Product__r.Name;
	    document.getElementById("product_lkid").value = rec1.SVMXC__Product__c;
	    document.getElementById("ibprodid").value = rec1.SVMXC__Product__c;
	    if (rec1.SVMXC__Top_Level__c)
		{
		document.getElementById("top_serial_lkid").value = rec1.SVMXC__Top_Level__c;
		if (rec1.SVMXC__Top_Level__r.SVMXC__Serial_Lot_Number__c)
		    document.getElementById("top_serial").value = rec1.SVMXC__Top_Level__r.SVMXC__Serial_Lot_Number__c;
		}

	    if (rec1.SVMXC__Top_Level__c && rec1.SVMXC__Top_Level__r.SVMXC__Product__c)
	    	{
		var soql2 = "SELECT Name FROM Product2 WHERE Id = '" + rec1.SVMXC__Top_Level__r.SVMXC__Product__c + "'";
		var qr2 = sforce.connection.query(soql2);
		if (qr2 && qr2.size > 0)
		    {
		    var rec2 = qr2.getArray("records")[0];
		    document.getElementById("top_product").value = rec2.Name;
		    document.getElementById("top_product_lkid").value = rec1.SVMXC__Top_Level__r.SVMXC__Product__c;
		    }
		}
	    }
	else
	    found = false;
	}
    else if (lkid.length == 0)
	{
	document.getElementById("top_product").value = "";
	document.getElementById("top_serial").value = "";
	}

    if(!found)
    	{
	document.getElementById("product").value = "";
	document.getElementById("product_lkid").value = "";
	document.getElementById("ibprodid").value = "";
	document.getElementById("serial_label").href = "#";
	}
    else
	{
	document.getElementById("serial_label").href = "/" + lkid;
	document.getElementById("serial_label").target = "_blank";
	}
    EntIbId = lkid;
}
/*================================================================================================*/
// Process the event of exiting product
// Clear serial number if it does not belong to the same product
function SVMXC_EN_ExitProduct()
{
    matched = false;

    var lkid = document.getElementById("product_lkid").value;
    var ibprodid = document.getElementById("ibprodid").value;
    if (lkid.length > 0 && ibprodid.length > 0 && lkid == ibprodid)
    	matched = true;

    if (!matched)
    	{
	document.getElementById("serial").value = "";
	document.getElementById("serial_lkid").value = "";
	document.getElementById("ibprodid").value = "";
	document.getElementById("top_product").value = "";
	document.getElementById("top_serial").value = "";
	document.getElementById("product_label").href = "#";
	}
    else
	{
	document.getElementById("product_label").href = "/" + lkid;
	document.getElementById("product_label").target = "_blank";
	}
}
/*================================================================================================*/
// Check entitlement after a delay of 3 seconds
function SVMXC_EN_CheckEntitlementDelay()
{
    document.getElementById('enwaitmsg').style.display = 'block'; 
    setTimeout("SVMXC_EN_CheckEntitlement()", 1000);
}
/*================================================================================================*/
// Wrapper to check entitlement. Perform the 6 steps below for component first and top-level IB next
// 1. Check service contracts with a broad coverage
// 2. Check warranty for IB
// 3. Check service contracts for IB
// 4. Check service contracts for product
// 5. Check service contracts for product family
// 6. Check service contracts for product line
function SVMXC_EN_CheckEntitlement()
{
	
	var IbId ="";
	var IbName ="";
	var TopIbId="";
	var TopIbName ="";
	entrownum = 0;
	try{
    var tbody = document.getElementById('list_tbody');
    clear_table(tbody);
	}catch(e){}

    ProdId = document.getElementById('product_lkid').value;
    ProdName = document.getElementById('product').value;
	
	if(trim(document.getElementById('serial').value) !="")
	{
		IbId = document.getElementById('serial_lkid').value;
		IbName = document.getElementById('serial').value;
		TopIbId = document.getElementById('top_serial_lkid').value;
	    TopIbName = document.getElementById('top_serial').value;
	}
	else
	{
		document.getElementById('serial_lkid').value="";
	    document.getElementById('top_serial_lkid').value="";
		document.getElementById('serial').value="";
		document.getElementById('top_serial').value="";

	}
    TopProdId = document.getElementById('top_product_lkid').value;
    TopProdName = document.getElementById('top_product').value;
   

    if (ProdId.length <= 0 && IbId.length <= 0)
    	{
	alert(SVMXC_GetMessage("MSG003"));
	document.getElementById('enwaitmsg').style.display = 'none'; 
	return false;
	}

    HeaderDone = false;

    SVMXC_EN_GetBroadServiceContracts(AcctId);

    if (IbId.length > 0)
    	{
	SVMXC_EN_GetWarrantyRecords(IbId);
	SVMXC_EN_GetServiceContract(AcctId, IbId, IbName, "IB");
	}
    if (ProdId.length > 0)
    	{
	SVMXC_EN_GetServiceContract(AcctId, ProdId, ProdName, "PROD");

	var qr1 = sforce.connection.query("SELECT Family, SVMXC__Product_Line__c FROM Product2 WHERE Id = '" + ProdId + "'");
	var rec1 = qr1.getArray("records")[0];
	if (rec1.Family && rec1.Family.length > 0)
	    SVMXC_EN_GetServiceContract(AcctId, rec1.Family, rec1.Family, "FAMILY");

	if (rec1.SVMXC__Product_Line__c && rec1.SVMXC__Product_Line__c.length > 0)
	    SVMXC_EN_GetServiceContract(AcctId, rec1.SVMXC__Product_Line__c, rec1.SVMXC__Product_Line__c, "LINE");
	}

    if (TopIbId.length > 0)
    	{
	SVMXC_EN_GetWarrantyRecords(TopIbId);
	SVMXC_EN_GetServiceContract(AcctId, TopIbId, TopIbName, "IB");
	}
    if (TopProdId.length > 0)
    	{
	SVMXC_EN_GetServiceContract(AcctId, TopProdId, TopProdName, "PROD");
	var qr2 = sforce.connection.query("SELECT Family, SVMXC__Product_Line__c FROM Product2 WHERE Id = '" + TopProdId + "'");
	var rec2 = qr2.getArray("records")[0];
	if (rec2.Family && rec2.Family.length > 0)
	    SVMXC_EN_GetServiceContract(AcctId, rec2.Family, rec2.Family, "FAMILY");

	if (rec2.SVMXC__Product_Line__c && rec2.SVMXC__Product_Line__c.length > 0)
	    SVMXC_EN_GetServiceContract(AcctId, rec2.SVMXC__Product_Line__c, rec2.SVMXC__Product_Line__c, "LINE");
	}
    document.getElementById('enwaitmsg').style.display = 'none'; 
    if (entrownum <= 0)
    	{
	alert(SVMXC_GetMessage("MSG009"));
	return false;
	}
}
/*================================================================================================*/
// Draw entitlement header 
function SVMXC_EN_DrawHeader()
{
    if (HeaderDone) return;
	try{
    var tbody = document.getElementById('list_tbody');
    clear_table(tbody);
	}catch(e){}

    var tr = makeRow({'class':'headerRow'});
    tbody.appendChild(tr);
    var col1 = SVMXC_GetMessage("LAB016");	// Select
    var col2 = SVMXC_GetMessage("LAB017");	// Warranty/Service Contract
    var col3 = SVMXC_GetMessage("LAB018");	// Coverage Details
    var col4 = SVMXC_GetMessage("LAB019");	// Service Level
    var col5 = SVMXC_GetMessage("LAB020");	// Renewal Number
    var col6 = SVMXC_GetMessage("LAB021");	// Renewal Date
    var col7 = SVMXC_GetMessage("LAB022");	// Start Date
    var col8 = SVMXC_GetMessage("LAB023");	// End Date
	

    createTag(tr,"th",{'scope':'col','align':'center'}).innerHTML = "<a href=\"#\" title=\"\">" + col1 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col2 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col3 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col4 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col5 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col6 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col7 + "</a>";
    createTag(tr,"th",{'scope':'col'}).innerHTML = "<a href=\"#\" title=\"\">" + col8 + "</a>";
    document.getElementById("addlscinfo").style.display = 'none'; 
    document.getElementById("addlwarrinfo").style.display = 'none'; 
    HeaderDone = true;
}
/*================================================================================================*/
// Get active warranty, if available, for the given IB
function SVMXC_EN_GetWarrantyRecords(ib_id)
{
    var basesoql = "SELECT Id, SVMXC__Service_Template__c, SVMXC__Service_Template__r.Name, " +
    		"SVMXC__Start_Date__c, SVMXC__End_Date__c, SVMXC__Exclusions__c, " +
		"SVMXC__Invoice_Required__c, SVMXC__Loaner_Provided__c, SVMXC__Onsite_Repair__c, " +
		"SVMXC__RMA_Required__c, SVMXC__Shipment_Allowed__c, SVMXC__Transferable__c, " + 
		"SVMXC__Walk_in_Allowed__c FROM SVMXC__Warranty__c " +
		"WHERE SVMXC__Installed_Product__c = '" + ib_id + "' ";

    var soql1 = basesoql + "AND SVMXC__Start_Date__c <= TODAY AND SVMXC__End_Date__c >= TODAY";
    var qr1 = sforce.connection.query(soql1);
    var warr_recs = new sforce.QueryResultIterator(qr1);
    while(warr_recs.hasNext())
	{
	var wrec = warr_recs.next();

	SVMXC_EN_DrawResultRow('Warranty', wrec.Id,
			wrec.SVMXC__Service_Template__c ? wrec.SVMXC__Service_Template__r.Name : "Unknown",
			wrec.SVMXC__Exclusions__c ? wrec.SVMXC__Exclusions__c : "",
			'', '', '', 
			wrec.SVMXC__Start_Date__c,
			wrec.SVMXC__End_Date__c, '', '', '', '', '', wrec, 'Active');
	}

    if (document.getElementById('expd_ent').checked)	// Include expired warranties also?
        {
	var soql2 = basesoql + "AND SVMXC__End_Date__c < TODAY";
	var qr2 = sforce.connection.query(soql2);
	warr_recs = new sforce.QueryResultIterator(qr2);
	while(warr_recs.hasNext())
	    {
	    var wrec = warr_recs.next();

	    SVMXC_EN_DrawResultRow('Warranty', wrec.Id,
			    wrec.SVMXC__Service_Template__c ? wrec.SVMXC__Service_Template__r.Name : "Unknown",
			    wrec.SVMXC__Exclusions__c ? wrec.SVMXC__Exclusions__c : "",
			    '', '', '', 
			    wrec.SVMXC__Start_Date__c,
			    wrec.SVMXC__End_Date__c, '', '', '', '', '', wrec, 'Expired');
	    }
	}

    if (document.getElementById('fut_ent').checked)	// Include future (yet-to-be-active) warranties also?
        {
	var soql3 = basesoql + "AND SVMXC__Start_Date__c > TODAY";
	var qr3 = sforce.connection.query(soql3);
	warr_recs = new sforce.QueryResultIterator(qr3);
	while(warr_recs.hasNext())
	    {
	    var wrec = warr_recs.next();

	    SVMXC_EN_DrawResultRow('Warranty', wrec.Id,
			    wrec.SVMXC__Service_Template__c ? wrec.SVMXC__Service_Template__r.Name : "Unknown",
			    wrec.SVMXC__Exclusions__c ? wrec.SVMXC__Exclusions__c : "",
			    '', '', '', 
			    wrec.SVMXC__Start_Date__c,
			    wrec.SVMXC__End_Date__c, '', '', '', '', '', wrec, 'Future');
	    }
	}
    return true;
}
/*================================================================================================*/
// Look for any active service contracts for the company that covers all products
function SVMXC_EN_GetBroadServiceContracts(acct_id)
{
    var basesoql = "SELECT Id, Name, SVMXC__Start_Date__c, SVMXC__End_Date__c, " +
    		"SVMXC__Renewal_Date__c, SVMXC__Renewal_Number__c, " +
		"SVMXC__Service_Contract_Notes__c, SVMXC__Service_Level__c, " +
		"SVMXC__Service_Level__r.Name, SVMXC__Service_Level__r.SVMXC__Description__c " +
		"FROM SVMXC__Service_Contract__c " +
		"WHERE SVMXC__Active__c = true AND SVMXC__Company__c = '" + acct_id + "'" +
		"AND SVMXC__All_Products_Covered__c = true ";

    var soql1 = basesoql + "AND SVMXC__Start_Date__c <= TODAY AND SVMXC__End_Date__c >= TODAY";
    var qr1 = sforce.connection.query(soql1);
    var screcs = new sforce.QueryResultIterator(qr1);
    while(screcs.hasNext())
	{
	var sc = screcs.next();

	var CovByTitle = SVMXC_GetMessage("LAB024");
	CovByTitle += ": " + sc.Name;

	if (sc.SVMXC__Service_Level__c && sc.SVMXC__Service_Level__c.length > 0)
	    {
	    var ServiceLevel = sc.SVMXC__Service_Level__r.Name;
	    var ServiceLevelDesc = sc.SVMXC__Service_Level__r.SVMXC__Description__c;
	    }
	else
	    {
	    var ServiceLevel = '';
	    var ServiceLevelDesc = '';
	    }

	var SvcList = SVMXC_EN_GetSCServicesList(sc.Id);

	var ContList = SVMXC_EN_GetSCContactsList(sc.Id);

	var SiteList = SVMXC_EN_GetSCSitesList(sc.Id);

	SVMXC_EN_DrawResultRow('Service Contract', sc.Id, sc.Name,
			CovByTitle,
			ServiceLevel,
			sc.SVMXC__Renewal_Number__c, 
			sc.SVMXC__Renewal_Date__c, 
			sc.SVMXC__Start_Date__c,
			sc.SVMXC__End_Date__c,
			ServiceLevelDesc,
			sc.SVMXC__Service_Contract_Notes__c,
			SvcList, ContList, SiteList, sc, 'Active');
	}

    if (document.getElementById('expd_ent').checked)	// Include expired service contracts also?
        {
	var soql2 = basesoql + "AND SVMXC__End_Date__c < TODAY";
	var qr2 = sforce.connection.query(soql2);
	screcs = new sforce.QueryResultIterator(qr2);
	while(screcs.hasNext())
	    {
	    var sc = screcs.next();

	    var CovByTitle = SVMXC_GetMessage("LAB024");
	    CovByTitle += ": " + sc.Name;

	    if (sc.SVMXC__Service_Level__c && sc.SVMXC__Service_Level__c.length > 0)
		{
		var ServiceLevel = sc.SVMXC__Service_Level__r.Name;
		var ServiceLevelDesc = sc.SVMXC__Service_Level__r.SVMXC__Description__c;
		}
	    else
		{
		var ServiceLevel = '';
		var ServiceLevelDesc = '';
		}

	    var SvcList = SVMXC_EN_GetSCServicesList(sc.Id);

	    var ContList = SVMXC_EN_GetSCContactsList(sc.Id);

	    var SiteList = SVMXC_EN_GetSCSitesList(sc.Id);

	    SVMXC_EN_DrawResultRow('Service Contract', sc.Id, sc.Name,
			    CovByTitle,
			    ServiceLevel,
			    sc.SVMXC__Renewal_Number__c, 
			    sc.SVMXC__Renewal_Date__c, 
			    sc.SVMXC__Start_Date__c,
			    sc.SVMXC__End_Date__c,
			    ServiceLevelDesc,
			    sc.SVMXC__Service_Contract_Notes__c,
			    SvcList, ContList, SiteList, sc, 'Expired');
	    }
	}

    if (document.getElementById('fut_ent').checked)	// Include future (yet-to-be-active) service contracts also?
        {
	var soql3 = basesoql + "AND SVMXC__Start_Date__c > TODAY";
	var qr3 = sforce.connection.query(soql3);
	screcs = new sforce.QueryResultIterator(qr3);
	while(screcs.hasNext())
	    {
	    var sc = screcs.next();

	    var CovByTitle = SVMXC_GetMessage("LAB024");
	    CovByTitle += ": " + sc.Name;

	    if (sc.SVMXC__Service_Level__c && sc.SVMXC__Service_Level__c.length > 0)
		{
		var ServiceLevel = sc.SVMXC__Service_Level__r.Name;
		var ServiceLevelDesc = sc.SVMXC__Service_Level__r.SVMXC__Description__c;
		}
	    else
		{
		var ServiceLevel = '';
		var ServiceLevelDesc = '';
		}

	    var SvcList = SVMXC_EN_GetSCServicesList(sc.Id);

	    var ContList = SVMXC_EN_GetSCContactsList(sc.Id);

	    var SiteList = SVMXC_EN_GetSCSitesList(sc.Id);

	    SVMXC_EN_DrawResultRow('Service Contract', sc.Id, sc.Name,
			    CovByTitle,
			    ServiceLevel,
			    sc.SVMXC__Renewal_Number__c, 
			    sc.SVMXC__Renewal_Date__c, 
			    sc.SVMXC__Start_Date__c,
			    sc.SVMXC__End_Date__c,
			    ServiceLevelDesc,
			    sc.SVMXC__Service_Contract_Notes__c,
			    SvcList, ContList, SiteList, sc, 'Future');
	    }
	}

    return true;
}
/*================================================================================================*/
// Get active service contract coverage, if available, for the given object (IB, product, family or line)
function SVMXC_EN_GetServiceContract(acct_id, obj_id, obj_name, obj_type)
{
    var basesoql = "SELECT SVMXC__Service_Contract__c, SVMXC__Service_Contract__r.Name, " +
    		"SVMXC__Service_Contract__r.SVMXC__Start_Date__c, SVMXC__Service_Contract__r.SVMXC__End_Date__c, " +
    		"SVMXC__Service_Contract__r.SVMXC__Renewal_Date__c, SVMXC__Service_Contract__r.SVMXC__Renewal_Number__c, " +
		"SVMXC__Service_Contract__r.SVMXC__Service_Contract_Notes__c, SVMXC__Service_Contract__r.SVMXC__Service_Level__c " +
		"FROM SVMXC__Service_Contract_Products__c " +
		"WHERE SVMXC__Service_Contract__r.SVMXC__Active__c = true ";

    if (obj_type != "IB" || MatchAccount == true)
	basesoql += "AND SVMXC__Service_Contract__r.SVMXC__Company__c = '" + acct_id + "' ";

    switch(obj_type)
        {
	case "IB":
	    basesoql += "AND SVMXC__Installed_Product__c = '" + obj_id + "'";
	    break;
	case "PROD":
	    basesoql += "AND SVMXC__Product__c = '" + obj_id + "'";
	    break;
	case "FAMILY":
	    basesoql += "AND SVMXC__Product_Family__c = '" + obj_id + "'";
	    break;
	case "LINE":
	    basesoql += "AND SVMXC__Product_Line__c = '" + obj_id + "'";
	    break;
	}

    var CovByTitle = SVMXC_GetMessage("LAB024");
    CovByTitle += ": " + obj_name;

    var soql1 = basesoql + " AND SVMXC__Service_Contract__r.SVMXC__Start_Date__c <= TODAY " +
			    "AND SVMXC__Service_Contract__r.SVMXC__End_Date__c >= TODAY ";
    var qr1 = sforce.connection.query(soql1);
    var screcs = new sforce.QueryResultIterator(qr1);
    while(screcs.hasNext())
	{
	var sc = screcs.next();

	if (sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c && sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c.length > 0)
	    {
	    var qr = sforce.connection.query("SELECT Name, SVMXC__Description__c FROM SVMXC__Service_Level__c WHERE Id = '" +
						sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c + "'");
	    var rec = qr.getArray("records")[0];
	    var ServiceLevel = rec.Name;
	    var ServiceLevelDesc = rec.SVMXC__Description__c;
	    }
	else
	    {
	    var ServiceLevel = '';
	    var ServiceLevelDesc = '';
	    }

	var SvcList = SVMXC_EN_GetSCServicesList(sc.SVMXC__Service_Contract__c);

	var ContList = SVMXC_EN_GetSCContactsList(sc.SVMXC__Service_Contract__c);

	var SiteList = SVMXC_EN_GetSCSitesList(sc.SVMXC__Service_Contract__c);

	SVMXC_EN_DrawResultRow('Service Contract', sc.SVMXC__Service_Contract__c,
			sc.SVMXC__Service_Contract__c ? sc.SVMXC__Service_Contract__r.Name : "Unknown",
			CovByTitle,
			ServiceLevel,
			sc.SVMXC__Service_Contract__r.SVMXC__Renewal_Number__c, 
			sc.SVMXC__Service_Contract__r.SVMXC__Renewal_Date__c, 
			sc.SVMXC__Service_Contract__r.SVMXC__Start_Date__c,
			sc.SVMXC__Service_Contract__r.SVMXC__End_Date__c,
			ServiceLevelDesc,
			sc.SVMXC__Service_Contract__r.SVMXC__Service_Contract_Notes__c,
			SvcList, ContList, SiteList, sc, 'Active');
	}

    if (document.getElementById('expd_ent').checked)	// Include expired service contracts also?
        {
	var soql2 = basesoql + " AND SVMXC__Service_Contract__r.SVMXC__End_Date__c < TODAY ";
	var qr2 = sforce.connection.query(soql2);
	screcs = new sforce.QueryResultIterator(qr2);
	while(screcs.hasNext())
	    {
	    var sc = screcs.next();

	    if (sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c && sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c.length > 0)
		{
		var qr = sforce.connection.query("SELECT Name, SVMXC__Description__c FROM SVMXC__Service_Level__c WHERE Id = '" +
						    sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c + "'");
		var rec = qr.getArray("records")[0];
		var ServiceLevel = rec.Name;
		var ServiceLevelDesc = rec.SVMXC__Description__c;
		}
	    else
		{
		var ServiceLevel = '';
		var ServiceLevelDesc = '';
		}

	    var SvcList = SVMXC_EN_GetSCServicesList(sc.SVMXC__Service_Contract__c);

	    var ContList = SVMXC_EN_GetSCContactsList(sc.SVMXC__Service_Contract__c);

	    var SiteList = SVMXC_EN_GetSCSitesList(sc.SVMXC__Service_Contract__c);

	    SVMXC_EN_DrawResultRow('Service Contract', sc.SVMXC__Service_Contract__c,
			    sc.SVMXC__Service_Contract__c ? sc.SVMXC__Service_Contract__r.Name : "Unknown",
			    CovByTitle,
			    ServiceLevel,
			    sc.SVMXC__Service_Contract__r.SVMXC__Renewal_Number__c, 
			    sc.SVMXC__Service_Contract__r.SVMXC__Renewal_Date__c, 
			    sc.SVMXC__Service_Contract__r.SVMXC__Start_Date__c,
			    sc.SVMXC__Service_Contract__r.SVMXC__End_Date__c,
			    ServiceLevelDesc,
			    sc.SVMXC__Service_Contract__r.SVMXC__Service_Contract_Notes__c,
			    SvcList, ContList, SiteList, sc, 'Expired');
	    }
	}

    if (document.getElementById('fut_ent').checked)	// Include future (yet-to-be-active) service contracts also?
        {
	var soql3 = basesoql + " AND SVMXC__Service_Contract__r.SVMXC__Start_Date__c > TODAY ";
	var qr3 = sforce.connection.query(soql3);
	screcs = new sforce.QueryResultIterator(qr3);
	while(screcs.hasNext())
	    {
	    var sc = screcs.next();

	    if (sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c && sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c.length > 0)
		{
		var qr = sforce.connection.query("SELECT Name, SVMXC__Description__c FROM SVMXC__Service_Level__c WHERE Id = '" +
						    sc.SVMXC__Service_Contract__r.SVMXC__Service_Level__c + "'");
		var rec = qr.getArray("records")[0];
		var ServiceLevel = rec.Name;
		var ServiceLevelDesc = rec.SVMXC__Description__c;
		}
	    else
		{
		var ServiceLevel = '';
		var ServiceLevelDesc = '';
		}

	    var SvcList = SVMXC_EN_GetSCServicesList(sc.SVMXC__Service_Contract__c);

	    var ContList = SVMXC_EN_GetSCContactsList(sc.SVMXC__Service_Contract__c);

	    var SiteList = SVMXC_EN_GetSCSitesList(sc.SVMXC__Service_Contract__c);

	    SVMXC_EN_DrawResultRow('Service Contract', sc.SVMXC__Service_Contract__c,
			    sc.SVMXC__Service_Contract__c ? sc.SVMXC__Service_Contract__r.Name : "Unknown",
			    CovByTitle,
			    ServiceLevel,
			    sc.SVMXC__Service_Contract__r.SVMXC__Renewal_Number__c, 
			    sc.SVMXC__Service_Contract__r.SVMXC__Renewal_Date__c, 
			    sc.SVMXC__Service_Contract__r.SVMXC__Start_Date__c,
			    sc.SVMXC__Service_Contract__r.SVMXC__End_Date__c,
			    ServiceLevelDesc,
			    sc.SVMXC__Service_Contract__r.SVMXC__Service_Contract_Notes__c,
			    SvcList, ContList, SiteList, sc, 'Future');
	    }
	}
    return true;
}
/*================================================================================================*/
// Get newline-separated list of services covered by service contract
function SVMXC_EN_GetSCServicesList(scid)
{
    var SvcList = "";

    var soql = "SELECT SVMXC__Service__r.Name FROM SVMXC__Service_Contract_Services__c " +
		"WHERE SVMXC__Service_Contract__c = '" + scid + "'";
    var qr = sforce.connection.query(soql);

    var svcrecs = new sforce.QueryResultIterator(qr);
    while(svcrecs.hasNext())
	{
	var svcrec = svcrecs.next();

	if (svcrec.SVMXC__Service__r && svcrec.SVMXC__Service__r.Name)
	    {
	    if (SvcList.length > 0) { SvcList += "<br>"; }
	    SvcList += svcrec.SVMXC__Service__r.Name;
	    }
	}

    return SvcList;
}
/*================================================================================================*/
// Get newline-separated list of contacts covered by service contract
function SVMXC_EN_GetSCContactsList(scid)
{
    var ContList = "";

    var soql = "SELECT SVMXC__Contact__r.Account.Name, SVMXC__Contact__r.Name FROM SVMXC__Service_Contract_Contacts__c " +
		"WHERE SVMXC__Service_Contract__c = '" + scid + "'";
    var qr = sforce.connection.query(soql);

    var contrecs = new sforce.QueryResultIterator(qr);
    while(contrecs.hasNext())
	{
	var contrec = contrecs.next();
		if (contrec.SVMXC__Contact__r && contrec.SVMXC__Contact__r.Name)
	    {
		    if (ContList.length > 0) { ContList += "<br>"; }
			if(contrec.SVMXC__Contact__r.Account != null)
			{
				ContList += contrec.SVMXC__Contact__r.Name + " - " + contrec.SVMXC__Contact__r.Account.Name;
			}
	    }
	}

    return ContList;
}
/*================================================================================================*/
// Get newline-separated list of sites covered by service contract
function SVMXC_EN_GetSCSitesList(scid)
{
    var SiteList = "";

    var soql = "SELECT SVMXC__Site__r.Name FROM SVMXC__Service_Contract_Sites__c " +
	       "WHERE SVMXC__Service_Contract__c = '" + scid + "'";
    var qr = sforce.connection.query(soql);

    var siterecs = new sforce.QueryResultIterator(qr);
    while(siterecs.hasNext())
	{
	var siterec = siterecs.next();

	if (siterec.SVMXC__Site__r && siterec.SVMXC__Site__r.Name)
	    {
	    if (SiteList.length > 0) { SiteList += "<br>"; }
	    SiteList += siterec.SVMXC__Site__r.Name;
	    }
	}

    return SiteList;
}
/*================================================================================================*/
// Draw the entitlement row
function SVMXC_EN_DrawResultRow(obj_type, obj_id, obj_name, obj_details, svc_level, renewal_num, renewal_date, start_date, end_date, sld, scn, svc_list, cont_list, site_list, objrec, validity)
{
    SVMXC_EN_DrawHeader();
    var tbody = document.getElementById('list_tbody');
    var tr = makeRow(makeAttrs(entrownum,tbody));
    tbody.appendChild(tr);
    tr.sobject = objrec;


	    // Col 1. Radio button
    createTag(tr,"td",[]).innerHTML =
	"<input type=\"radio\" onClick=\"SVMXC_EN_ShowAddDetails(this);\" name=\"radio\" value=\"" + obj_id + "\"></input>";

    if (obj_type == 'Warranty') { var obj_label = SVMXC_GetMessage("LAB014"); }
    else { var obj_label = SVMXC_GetMessage("LAB015"); }
	

    if (!obj_name) { obj_name = obj_label + ": " + 'Unknown'; }
    else { obj_name = obj_label + ": " + obj_name; }

    switch(validity)
        {
	case "Active":
	    colst = "style=\"color:darkgreen\"";
	    break;
	case "Expired":
	    colst = "style=\"color:red\"";
	    break;
	case "Future":
	    colst = "style=\"color:blue\"";
	    break;
        }

	    // Col 2. Template Name
    createTag(tr,"td",[]).innerHTML = "<a " + colst + " target=_blank id=\"" + obj_id + "name\" href=\"/" + obj_id + "\">" + obj_name + "</a>";

    if (!obj_details) { obj_details = ''; }

	    // Col 3. Details
    createTag(tr,"td",[]).innerHTML = "<a target=_blank id=\"" + obj_id + "detl\" href=\"/" + obj_id + "\">" + obj_details + "</a>";

	    // Col 4. Service Level
    createTag(tr,"td",[]).innerHTML = "<a target=_blank id=\"" + obj_id + "svcl\" href=\"/" + obj_id + "\">" + svc_level + "</a>";

    if (!renewal_num) { renewal_num = ''; }

	    // Col 5. Renewal Number
    createTag(tr,"td",[]).innerHTML = "<a target=_blank id=\"" + obj_id + "renn\" href=\"/" + obj_id + "\">" + renewal_num + "</a>";

	    // Col 6. Renewal Date
    if (renewal_date && renewal_date.length > 0)
	{
	var dc = renewal_date.split('-', 3);
	var d = new Date(dc[0], dc[1] - 1, dc[2]);
	var dfmt = parent.UserContext.dateFormat;
	var RenewalDate = DateUtil.formatDate(d, dfmt);
	}
    else
	var RenewalDate = '';
    createTag(tr,"td",[]).innerHTML = "<a target=_blank id=\"" + obj_id + "rend\" href=\"/" + obj_id + "\">" + RenewalDate + "</a>";

	    // Col 7. Start date
    dc = start_date.split('-', 3);
    d = new Date(dc[0], dc[1] - 1, dc[2]);
    dfmt = parent.UserContext.dateFormat;
    var StartDate = DateUtil.formatDate(d, dfmt);
    createTag(tr,"td",[]).innerHTML = "<a target=_blank id=\"" + obj_id + "start\" href=\"/" + obj_id + "\">" + StartDate + "</a>";

	    // Col 8. End date
    dc = end_date.split('-', 3);
    d = new Date(dc[0], dc[1] - 1, dc[2]);
    dfmt = parent.UserContext.dateFormat;
    var EndDate = DateUtil.formatDate(d, dfmt);
    createTag(tr,"td",[]).innerHTML = "<a target=_blank id=\"" + obj_id + "end\" href=\"/" + obj_id + "\">" + EndDate + "</a>";

    if (scn)		// Service contract notes
	createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "scn\" value=\"" + scn + "\"></input>";
    else
	createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "scn\" value=\"" + '' + "\"></input>";

    if (sld)		// Service level description
	createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "sld\" value=\"" + sld + "\"></input>";
    else
	createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "sld\" value=\"" + '' + "\"></input>";

    			// Hidden Start date in SFDC format
    createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "startdate\" value=\"" + start_date + "\"></input>";

    			// Hidden End date in SFDC format
    createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "enddate\" value=\"" + end_date + "\"></input>";

    			// Hidden object type
    createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "objtype\" value=\"" + obj_type + "\"></input>";
 

    			// Hidden Services list
    createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "svc_list\" value=\"" + svc_list + "\"></input>";

    			// Hidden Contacts list
    createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "cont_list\" value=\"" + cont_list + "\"></input>";

    			// Hidden Sites list
    createTag(tr,"td",[]).innerHTML = "<input type=\"hidden\" id=\"" + obj_id + "site_list\" value=\"" + site_list + "\"></input>";

    			// Hidden Warranty flags
    if (obj_type == 'Warranty')
    	{
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "inv_reqd\" value=\"" + objrec.SVMXC__Invoice_Required__c + "\"></input>";
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "shp_alwd\" value=\"" + objrec.SVMXC__Shipment_Allowed__c + "\"></input>";
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "loan_prov\" value=\"" + objrec.SVMXC__Loaner_Provided__c + "\"></input>";
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "rma_reqd\" value=\"" + objrec.SVMXC__RMA_Required__c + "\"></input>";
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "ons_repair\" value=\"" + objrec.SVMXC__Onsite_Repair__c + "\"></input>";
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "xferable\" value=\"" + objrec.SVMXC__Transferable__c + "\"></input>";
	createTag(tr,"td",[]).innerHTML =
		    "<input type=\"hidden\" id=\"" + obj_id + "walkin_alwd\" value=\"" + objrec.SVMXC__Walk_in_Allowed__c + "\"></input>";
	if (objrec.SVMXC__Exclusions__c)
	    createTag(tr,"td",[]).innerHTML =
			"<input type=\"hidden\" id=\"" + obj_id + "warr_excl\" value=\"" + objrec.SVMXC__Exclusions__c + "\"></input>";
	else
	    createTag(tr,"td",[]).innerHTML =
			"<input type=\"hidden\" id=\"" + obj_id + "warr_excl\" value=\" \"></input>";
	}
    entrownum+=1;
}
/*================================================================================================*/
function SVMXC_EN_ShowAddDetails(ctl)
{
    var ot = document.getElementById(ctl.value + "objtype").value;

    if (ot == 'Warranty')
    	{
	if(document.getElementById(ctl.value + "inv_reqd").value == "true")
	    document.getElementById("inv_reqd").checked = true;
	else
	    document.getElementById("inv_reqd").checked = false;

	if(document.getElementById(ctl.value + "shp_alwd").value == "true")
	    document.getElementById("shp_alwd").checked = true;
	else
	    document.getElementById("shp_alwd").checked = false;

	if(document.getElementById(ctl.value + "loan_prov").value == "true")
	    document.getElementById("loan_prov").checked = true;
	else
	    document.getElementById("loan_prov").checked = false;

	if(document.getElementById(ctl.value + "rma_reqd").value == "true")
	    document.getElementById("rma_reqd").checked = true;
	else
	    document.getElementById("rma_reqd").checked = false;

	if(document.getElementById(ctl.value + "ons_repair").value == "true")
	    document.getElementById("ons_repair").checked = true;
	else
	    document.getElementById("ons_repair").checked = false;

	if(document.getElementById(ctl.value + "xferable").value == "true")
	    document.getElementById("xferable").checked = true;
	else
	    document.getElementById("xferable").checked = false;

	if(document.getElementById(ctl.value + "walkin_alwd").value == "true")
	    document.getElementById("walkin_alwd").checked = true;
	else
	    document.getElementById("walkin_alwd").checked = false;

	if (document.getElementById(ctl.value + "warr_excl").value)
	    document.getElementById("warr_excl").innerHTML = document.getElementById(ctl.value + "warr_excl").value; 

	document.getElementById("addlwarrinfo").style.display = 'block'; 
	document.getElementById("addlscinfo").style.display = 'none'; 
	}
    else
        {
	if(document.getElementById(ctl.value + "sld"))
	    document.getElementById("svc_level_desc").innerHTML = document.getElementById(ctl.value + "sld").value; 
	if(document.getElementById(ctl.value + "scn"))
	    document.getElementById("sc_notes").innerHTML = document.getElementById(ctl.value + "scn").value; 
	if(document.getElementById(ctl.value + "svc_list"))
	    document.getElementById("sc_svc_list").innerHTML = document.getElementById(ctl.value + "svc_list").value; 
	if(document.getElementById(ctl.value + "cont_list"))
	    document.getElementById("sc_cont_list").innerHTML = document.getElementById(ctl.value + "cont_list").value; 
	if(document.getElementById(ctl.value + "site_list"))
	    document.getElementById("sc_site_list").innerHTML = document.getElementById(ctl.value + "site_list").value; 
	document.getElementById("addlscinfo").style.display = 'block'; 
	document.getElementById("addlwarrinfo").style.display = 'none'; 
	}
}
/*================================================================================================*/
function SVMXC_EN_SaveEntitlement()
{
    if (entrownum <= 0)
    	{
	alert(SVMXC_GetMessage("MSG007"));
	return;
	}

    var selected = false;
    var radios = document.getElementsByName('radio');
    for (var j = 0; j < radios.length; j++)
	{
	var ctl = radios[j];
	if (ctl.checked)
	    {
	    selected = true;
	    var SelectedId = ctl.value;
	    break;
	    }
	}
    if (!selected)
    	{
	alert(SVMXC_GetMessage("MSG008"));
	return false;
	}

    if (!SVMXC_EN_SaveProduct(false)) { return false; }

    var currdate = new Date();

    // Deactivate any existing entitlements for the case/SVO
    if (ObjType == 'CASE')
	var soql1 = "SELECT Id FROM SVMXC__Entitlement_History__c WHERE SVMXC__Inactive_Date__c = null AND SVMXC__Case__c = '" + EntCaseId + "'";
    else
	var soql1 = "SELECT Id FROM SVMXC__Entitlement_History__c WHERE SVMXC__Inactive_Date__c = null AND SVMXP__Service_Order__c = '" + EntSVOId + "'";
    var qr1 = sforce.connection.query(soql1);
    if (qr1.size > 0)
    	{
	var enthistrecs = new sforce.QueryResultIterator(qr1);
	while(enthistrecs.hasNext())
	    {
	    var enthistrec = enthistrecs.next();
	    var entupd = new sforce.SObject("SVMXC__Entitlement_History__c");
	    entupd.Id = enthistrec.Id;
	    entupd.SVMXC__Inactive_Date__c = SVMXC_ConvertDateToSFDC(currdate);
	    try {
		var ret = sforce.connection.update([entupd]);
		}
	    catch (e)
		{
		alert(SVMXC_GetMessage("MSG001") + "\n" + e);
		return false;
		}
	    }
	}

    var ent = new sforce.SObject("SVMXC__Entitlement_History__c");
    ent.SVMXC__Date_of_entitlement__c = SVMXC_ConvertDateToSFDC(currdate);
    ent.SVMXC__Start_Date__c = document.getElementById(SelectedId + "startdate").value;
    ent.SVMXC__End_Date__c = document.getElementById(SelectedId + "enddate").value;
    ent.SVMXC__Entitlement_notes__c = document.getElementById("ent_notes").value;
    if (document.getElementById(SelectedId + "objtype").value == 'Warranty')
	ent.SVMXC__Warranty__c = SelectedId;
    else
	ent.SVMXC__Service_Contract__c = SelectedId;
    if (ObjType == 'CASE')
	ent.SVMXC__Case__c = EntCaseId;
    else
	ent.SVMXP__Service_Order__c = EntSVOId;
    try {
	var ret = sforce.connection.create([ent]);
	parent.window.location = "/" + CurrObjId;
	}
    catch (e)
	{
	alert(SVMXC_GetMessage("MSG001") + "\n" + e);
	return false;
	}
    return true;
}
/*================================================================================================*/
function SVMXC_EN_SaveProduct(refresh)
{
    if (!SVMXC_EN_ValidateProd()) { return false; }

    ProdId = document.getElementById('product_lkid').value;
    IbId = document.getElementById('serial_lkid').value;
    TopIbId = document.getElementById('top_serial_lkid').value;

    if (ObjType == 'CASE')
	{
	var obj = new sforce.SObject("Case");
	obj.Id = EntCaseId;
	obj.SVMXC__Product__c = ProdId;
	if (IbId && IbId.length > 0)
	    obj.SVMXC__Component__c = IbId;
	else
	    obj.SVMXC__Component__c = null;
	if (TopIbId && TopIbId.length > 0)
	    obj.SVMXC__Top_Level__c = TopIbId;
	else
	    obj.SVMXC__Top_Level__c = null;
	}
    else
	{
	var obj = new sforce.SObject("SVMXP__Service_Order__c");
	obj.Id = EntSVOId;
	if (IbId && IbId.length > 0)
	    obj.SVMXP__Component__c = IbId;
	else
	    obj.SVMXP__Component__c = null;

	if (TopIbId && TopIbId.length > 0)
	    obj.SVMXP__Top_Level__c = TopIbId;
	else
	    obj.SVMXP__Top_Level__c = null;
	}
    try {
	var ret = sforce.connection.update([obj]);
	if (refresh)
	    parent.window.location = "/" + CurrObjId;
    	}
    catch (e)
    	{
	alert(SVMXC_GetMessage("MSG001") + "\n" + e);
	return false;
	}
    return true;
}
/*================================================================================================*/
function SVMXC_EN_ValidateProd()
{
    ProdId = document.getElementById('product_lkid').value;
    IbId = document.getElementById('serial_lkid').value;

    if (ProdId.length <= 0 && IbId.length <= 0)
    	{
	alert(SVMXC_GetMessage("MSG004"));
	return false;
	}
    if (!SVMXC_IsValidLookup("product"))
    	{
	alert(SVMXC_GetMessage("MSG005"));
	return false;
	}
    if (!SVMXC_IsValidLookup("serial"))
    	{
	alert(SVMXC_GetMessage("MSG006"));
	return false;
	}
    return true;
}
/*================================================================================================*/
// Launch IB configuration after a delay of 3 seconds
function SVMXC_EN_LaunchIBConfigDelay()
{
    document.getElementById('ibwaitmsg').style.display = 'block'; 
    setTimeout("SVMXC_EN_LaunchIBConfig()", 3000);
}
/*================================================================================================*/
function SVMXC_EN_LaunchIBConfig()
{
    document.getElementById("ibtree").style.display = 'none';
    var ibid = document.getElementById('serial_lkid').value;
    if (ibid && ibid.length > 0)
	{
	document.getElementById("domRoot").innerHTML = "";
	SVMXC_EN_ShowIBConfiguration(ibid);
	document.getElementById("ibtree").style.display = 'block';
	}
    document.getElementById('ibwaitmsg').style.display = 'none'; 
}
/*================================================================================================*/
function SVMXC_EN_ShowIBConfigSection()
{
    document.getElementById("domRoot").style.display = 'block';
}
/*================================================================================================*/
function SVMXC_EN_HideIBConfigSection()
{
    document.getElementById("domRoot").style.display = 'none';
}
/*================================================================================================*/
/*================================================================================================*/
function SVMXC_AssignToSFDC(fname)
{
    var fval = document.getElementById(fname).value;
    if (fval && fval.length > 0)
    	return fval;
    else
    	return null;
}
/*================================================================================================*/
function SVMXC_EN_ShowIBConfiguration(ibid)
{
    var HasParent = true;

    if (!ibid) { return; }

    InstProdId = ibid;

    xbDetectBrowser();

    while(HasParent)
    	{
	var soql1 = "SELECT Id, SVMXC__Product__r.Name, SVMXC__Serial_Lot_Number__c, SVMXC__Parent__c, " +
		    "SVMXC__Status__c, SVMXC__Date_Shipped__c, SVMXC__Date_Installed__c, " +
		    "SVMXC__Site__c, SVMXC__Site__r.Name, SVMXC__Site__r.SVMXC__City__c, " +
		    "SVMXC__Site__r.SVMXC__Country__c, SVMXC__City__c, SVMXC__Country__c " +
		    "FROM SVMXC__Installed_Product__c WHERE Id = '" + ibid + "'";
	var qr1 = sforce.connection.query(soql1);
	if (qr1.size <= 0)
	    {
	    alert(SVMXC_GetMessage("MSG002"));
	    return false;
	    }
	ibrec = qr1.getArray("records")[0];
	if (ibrec.SVMXC__Parent__c && ibrec.SVMXC__Parent__c.length > 0)
	    ibid = ibrec.SVMXC__Parent__c;
	else
	    HasParent = false;
	}

    var treeData = ibrec.SVMXC__Product__r.Name;

    if (ibrec.SVMXC__Serial_Lot_Number__c && ibrec.SVMXC__Serial_Lot_Number__c.length > 0) treeData += ", " + ibrec.SVMXC__Serial_Lot_Number__c;
    if (ibrec.SVMXC__Status__c && ibrec.SVMXC__Status__c.length > 0) treeData += ", " + ibrec.SVMXC__Status__c;

    if (ibrec.SVMXC__Site__r)
	{
	if (ibrec.SVMXC__Site__r.SVMXC__City__c) treeData += ", " + ibrec.SVMXC__Site__r.SVMXC__City__c;
	if (ibrec.SVMXC__Site__r.SVMXC__Country__c) treeData += ", " + ibrec.SVMXC__Site__r.SVMXC__Country__c;
	}
    else
	{
	if (ibrec.SVMXC__City__c) treeData += ", " + ibrec.SVMXC__City__c;
	if (ibrec.SVMXC__Country__c) treeData += ", " + ibrec.SVMXC__Country__c;
	}

    foldersTree = gFld("<b>" + treeData + "</b>", "");
    foldersTree.treeID = "IBTree" ;

    	    // Get children for the top-level node
    SVMXC_EN_GetIBChildren(ibrec.Id, foldersTree);

    initializeDocument();	// This is the function that renders the tree on the HTML div
}
/*=====================================================================================*/
function SVMXC_EN_GetIBChildren(ibid, parentNode)
{
    var soql2 = "SELECT Id, SVMXC__Product__r.Name, SVMXC__Serial_Lot_Number__c, " +
		"SVMXC__Status__c, SVMXC__Date_Shipped__c, SVMXC__Date_Installed__c, " +
		"SVMXC__Site__c, SVMXC__Site__r.Name, SVMXC__Site__r.SVMXC__City__c, " +
		"SVMXC__Site__r.SVMXC__Country__c, SVMXC__City__c, SVMXC__Country__c " +
		"FROM SVMXC__Installed_Product__c WHERE SVMXC__Parent__c = '" + ibid + "'";
    var qr2 = sforce.connection.query(soql2);

    if (qr2.size <= 0) { return; }

    var ibrecs = new sforce.QueryResultIterator(qr2);

    while (ibrecs.hasNext())
    	{
	var ibrec = ibrecs.next();

	var treeData = ibrec.SVMXC__Product__r.Name;

	if (ibrec.SVMXC__Serial_Lot_Number__c && ibrec.SVMXC__Serial_Lot_Number__c.length > 0) treeData += ", " + ibrec.SVMXC__Serial_Lot_Number__c;
	if (ibrec.SVMXC__Status__c && ibrec.SVMXC__Status__c.length > 0) treeData += ", " + ibrec.SVMXC__Status__c;

	if (ibrec.SVMXC__Site__r)
	    {
	    if (ibrec.SVMXC__Site__r.SVMXC__City__c) treeData += ", " + ibrec.SVMXC__Site__r.SVMXC__City__c;
	    if (ibrec.SVMXC__Site__r.SVMXC__Country__c) treeData += ", " + ibrec.SVMXC__Site__r.SVMXC__Country__c;
	    }
	else
	    {
	    if (ibrec.SVMXC__City__c) treeData += ", " + ibrec.SVMXC__City__c;
	    if (ibrec.SVMXC__Country__c) treeData += ", " + ibrec.SVMXC__Country__c;
	    }

	var treeChild = insFld(parentNode, gFld(treeData, "/" + ibrec.Id));

	SVMXC_EN_GetIBChildren(ibrec.Id, treeChild);
	}
}
/*=====================================================================================*/
/*************<<<<<<<<<<<< GENERIC UTILITIES >>>>>>>>>>>>>>>>> *****************/
// Get the retURL parameter from the window URL
// It is required in save or cancel events
function SVMXC_GetReturnURL()
{
    var theArgName = 'retURL';
    var sArgs = parent.window.location.search.slice(1).split('&');
    r = '';
    for (var i = 0; i < sArgs.length; i++) {
        if (sArgs[i].slice(0,sArgs[i].indexOf('=')) == theArgName) {
            r = sArgs[i].slice(sArgs[i].indexOf('=')+1);
            break;
        }
    }
    retURL = r.length > 0 ? unescape(r).split(',') : '';
}
/*================================================================================================*/
// Assign a given text value to a form field
function SVMXC_AssignFormValue(ctlname, fromval)
{
    if(fromval) { document.getElementById(ctlname).value = fromval; }
    else { document.getElementById(ctlname).value = ""; }
}
/*================================================================================================*/
// Assign a given date value to a form field after converting it to the user's locale format
function SVMXC_AssignFormDate(ctlname, fromdate)
{
    if (fromdate)
        {
	var dc = fromdate.split('-', 3);
	var d = new Date(dc[0], dc[1] - 1, dc[2]);
	var dfmt = parent.UserContext.dateFormat;
	document.getElementById(ctlname).value = DateUtil.formatDate(d, dfmt);
	}
    else
	document.getElementById(ctlname).value = "";
}
/*================================================================================================*/
// Convert a date from user's local format to SFDC's format (YYYY-MM-DD)
function SVMXC_ConvertToSFDCDateFormat(ctlname)
{
    var dt = document.getElementById(ctlname).value;
    if (dt.length <= 0) return null;

    var d = SVMXC_GetDateFromFormat(dt, parent.UserContext.dateFormat);

    var mon = parseInt(d.getMonth()) + 1;
    if (mon < 10) { mon = "0" + mon; }

    var day = parseInt(d.getDate());
    if (day < 10) { day = "0" + day; }

    var dts = d.getFullYear() + "-" + mon + "-" + day;

    return dts;
}
/*================================================================================================*/
// Convert a Date variable to SFDC date format
function SVMXC_ConvertDateToSFDC(dateval)
{
    var mon = parseInt(dateval.getMonth()) + 1;
    if (mon < 10) { mon = "0" + mon; }

    var day = parseInt(dateval.getDate());
    if (day < 10) { day = "0" + day; }

    var dts = dateval.getFullYear() + "-" + mon + "-" + day;

    return dts;
}
/*================================================================================================*/
// This function is a hack from SFDC library. It returns a javascript Date variable
// for a date value in the given format. The SFDC routine returns the time part which we don't want.
function SVMXC_GetDateFromFormat(val,format)
{
	val=val+"";
	format=format+"";
	var i_val=0;
	var i_format=0;
	var c="";
	var token="";
	var token2="";
	var x,y;
	var now=new Date();
	var year=now.getYear();
	var month=now.getMonth()+1;
	var date=1;
	var hh=now.getHours();
	var mm=now.getMinutes();
	var ss=now.getSeconds();
	var ampm="";
	
	while (i_format < format.length) {
		// Get next token from format string
		c=format.charAt(i_format);
		token="";
		while ((format.charAt(i_format)==c) && (i_format < format.length)) {
			token += format.charAt(i_format++);
			}
		// Extract contents of value based on format token
		if (token=="yyyy" || token=="yy" || token=="y") {
			if (token=="yyyy") { x=2;y=4; } // x=2,y=4 to be consistent with java.
			if (token=="yy")   { x=2;y=2; }
			if (token=="y")    { x=2;y=4; }
			year=DateUtil._getInt(val,i_val,x,y);
			if (year==null) { return 0; }
			i_val += year.length;
			if (year.length==2) {
				if (year > 70) { year=1900+(year-0); }
				else { year=2000+(year-0); }
				}
			}
		else if (token=="MMM"||token=="NNN"){
			month=0;
			for (var i=0; i<DateUtil.MONTH_NAMES.length; i++) {
				var month_name=DateUtil.MONTH_NAMES[i];
				if (val.substring(i_val,i_val+month_name.length).toLowerCase()==month_name.toLowerCase()) {
					if (token=="MMM"||(token=="NNN"&&i>11)) {
						month=i+1;
						if (month>12) { month -= 12; }
						i_val += month_name.length;
						break;
						}
					}
				}
			if ((month < 1)||(month>12)){return 0;}
			}
		else if (token=="EE"||token=="E"){
			for (var i=0; i<DateUtil.DAY_NAMES.length; i++) {
				var day_name=DateUtil.DAY_NAMES[i];
				if (val.substring(i_val,i_val+day_name.length).toLowerCase()==day_name.toLowerCase()) {
					i_val += day_name.length;
					break;
					}
				}
			}
		else if (token=="MM"||token=="M") {
			month=DateUtil._getInt(val,i_val,1,2); // Always use min len 1 to be lenient.
			if(month==null||(month<1)||(month>12)){return 0;}
			i_val+=month.length;}
		else if (token=="dd"||token=="d") {
			date=DateUtil._getInt(val,i_val,1,2); // Always use min len 1 to be lenient.
			if(date==null||(date<1)||(date>31)){return 0;}
			i_val+=date.length;}
		else if (token=="hh"||token=="h") {
			hh=DateUtil._getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>12)){return 0;}
			i_val+=hh.length;}
		else if (token=="HH"||token=="H") {
			hh=DateUtil._getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>23)){return 0;}
			i_val+=hh.length;}
		else if (token=="KK"||token=="K") {
			hh=DateUtil._getInt(val,i_val,token.length,2);
			if(hh==null||(hh<0)||(hh>11)){return 0;}
			i_val+=hh.length;}
		else if (token=="kk"||token=="k") {
			hh=DateUtil._getInt(val,i_val,token.length,2);
			if(hh==null||(hh<1)||(hh>24)){return 0;}
			i_val+=hh.length;hh--;}
		else if (token=="mm"||token=="m") {
			mm=DateUtil._getInt(val,i_val,token.length,2);
			if(mm==null||(mm<0)||(mm>59)){return 0;}
			i_val+=mm.length;}
		else if (token=="ss"||token=="s") {
			ss=DateUtil._getInt(val,i_val,token.length,2);
			if(ss==null||(ss<0)||(ss>59)){return 0;}
			i_val+=ss.length;}
		else if (token=="a") {
		    var am = DateUtil.getAMSymbol();
		    var pm = DateUtil.getPMSymbol();
		    var stra = val.substring(i_val, i_val + am.length);
		    var strp = val.substring(i_val, i_val + pm.length);
			if (stra == am || stra.toUpperCase() == am) {
			    ampm = am;
			} else if (strp == pm || strp.toUpperCase() == pm) {
			    ampm = pm;
			} else {
			    return 0;
		    }
                i_val += ampm.length;
		}
		else {
			if (val.substring(i_val,i_val+token.length)!=token) {return 0;}
			else {i_val+=token.length;}
			}
		}
	// If there are any trailing characters left in the value, it doesn't match
	if (i_val != val.length) { return 0; }
	// Is date valid for month?
	if (month==2) {
		// Check for leap year
		if ( ( (year%4==0)&&(year%100 != 0) ) || (year%400==0) ) { // leap year
			if (date > 29){ return 0; }
			}
		else { if (date > 28) { return 0; } }
		}
	if ((month==4)||(month==6)||(month==9)||(month==11)) {
		if (date > 30) { return 0; }
		}
	// Correct hours value
	if (hh<12 && ampm == DateUtil.getPMSymbol()) { hh=hh-0+12; }
	else if (hh>11 && ampm == DateUtil.getAMSymbol()) { hh-=12; }
	var newdate=new Date(year,month-1,date,hh,mm,ss);
	return newdate;
}
/*================================================================================================*/
// Show a popup calendar adjacent to the date field
// Too bad we can't use the standard date popup SFDC uses
function SVMXC_ShowCal(ctl)
{
    openPopup('/home/calendar.jsp?form=ent_form&' + 'field=' + ctl.id + '&mo=0&callonchange=true',
    	'_blank', 186, 170,
	'width=186,height=170,resizable=yes,toolbar=no,status=no,scrollbars=no,menubar=no,directories=no,location=no,dependant=yes',
	true);
}
/*================================================================================================*/
// Check if the given field is blank
function SVMXC_IsFieldBlank(fname)
{
    var ctl = document.getElementById(fname);

    if((ctl.type == "text" || ctl.type == "hidden") && (!ctl.value || ctl.value.length == 0)) { return true; }

    if(ctl.type == "select-one" && ctl.selectedIndex == -1) { return true; }

    return false;
}
/*================================================================================================*/
// Check if the given lookup field has a valid value linked to an ID
function SVMXC_IsValidLookup(fname)
{
    var ctl = document.getElementById(fname);
    var idctl = document.getElementById(fname + "_lkid");

    if (ctl.value && ctl.value.length > 0 && idctl.value.length == 0) { return false; }

    return true;
}
/*================================================================================================*/
// Check if the given date is valid as per the user's locale
function SVMXC_IsValidDate(fname)
{
    var ctl = document.getElementById(fname);
    return(DateUtil.isDate(ctl.value, parent.UserContext.dateFormat));
}
/*================================================================================================*/
// Build a global hash table of message numbers and messages.
// This array will be used for displaying info/warning/error messages to the user.
function SVMXC_InitMessageList(submoduleid)
{
    var found = false;

    var LangList = new Array();

    		// Hash (Map) of SFDC language ISO code to Language picklist in ServiceMax tags object
    LangList["en_US"] = "English";
    LangList["de"] = "German";
    LangList["es"] = "Spanish";
    LangList["fr"] = "French";
    LangList["it"] = "Italian";
    LangList["ja"] = "Japanese";
    LangList["sv"] = "Swedish";
    LangList["ko"] = "Korean";
    LangList["zh_TW"] = "Chinese (Traditional)";
    LangList["zh_CN"] = "Chinese (Simplified)";
    LangList["pt_BR"] = "Portuguese (Brazilian)";
    LangList["nl_NL"] = "Dutch";
    LangList["da"] = "Danish";
    LangList["th"] = "Thai";
    LangList["fi"] = "Finnish";
    LangList["ru"] = "Russian";

    var UserLang = sforce.connection.getUserInfo().userLanguage;	// ISO code of the user's language

    if (!LangList[UserLang]) { UserLang = "English"; }		// if user's language is not found, default it to English
    else { UserLang = LangList[UserLang]; }

    var soql = "SELECT Id, Name, SVMXC__Tag_Text__c, SVMXC__Language__c " +
    		"FROM SVMXC__ServiceMax_Tags__c " +
		"WHERE SVMXC__SubmoduleID__c = '" + submoduleid + "' " +
		"AND SVMXC__Language__c IN ('Master', '" + UserLang + "')";
    var qr = sforce.connection.query(soql);
    var tagrecs = new sforce.QueryResultIterator(qr);
    while (tagrecs.hasNext())
    	{
        var tagrec = tagrecs.next();
	var TagId = tagrec.Name;
	var TagText = tagrec.SVMXC__Tag_Text__c;
	var Lang = tagrec.SVMXC__Language__c;
	if (Lang == "Master" && !MsgList[TagId])
	    MsgList[TagId] = TagText;
	else if (Lang == UserLang && TagText && TagText.length > 0)	// Translation available in the specific language
	    MsgList[TagId] = TagText;

	found = true;
	}

    if (!found)
	{
	MsgList['MSG001'] = 'An internal error occurred when saving data. Please contact your ServiceMax administrator to resolve this.';
	MsgList['MSG002'] = 'An internal error occurred when retrieving data. Please contact your ServiceMax administrator to resolve this.';
	MsgList['MSG003'] = 'You have not entered enough information to perform entitlement check.';
	MsgList['MSG004'] = 'No product information has been entered to save.';
	MsgList['MSG005'] = 'This is not a valid product. Use the lookup to select a valid product.';
	MsgList['MSG006'] = 'This is not a valid serial number. Use the lookup to select a valid serial number.';
	MsgList['MSG007'] = 'No entitlement records available. Please perform entitlement check first.';
	MsgList['MSG008'] = 'Please select an entitlement record from the list first.';
	MsgList['MSG009'] = 'No active warranties or service contracts found.';
	MsgList['LAB001'] = 'Check Entitlement';
	MsgList['LAB002'] = 'Save Entitlement';
	MsgList['LAB003'] = 'Save Product';
	MsgList['LAB004'] = 'Configuration';
	MsgList['LAB005'] = 'Include';
	MsgList['LAB006'] = 'Expired Entitlements';
	MsgList['LAB007'] = 'Future Entitlements';
	MsgList['LAB008'] = 'Product';
	MsgList['LAB009'] = 'Serial/Lot Number';
	MsgList['LAB010'] = 'Top-Level';
	MsgList['LAB011'] = 'Serial/Lot Number';
	MsgList['LAB012'] = 'Entitlement Notes';
	MsgList['LAB013'] = 'Date of Entitlement';
	MsgList['LAB014'] = 'Warranty';
	MsgList['LAB015'] = 'Service Contract';
	MsgList['LAB016'] = 'Select';
	MsgList['LAB017'] = 'Warranty/Service Contract';
	MsgList['LAB018'] = 'Coverage Details';
	MsgList['LAB019'] = 'Service Level';
	MsgList['LAB020'] = 'Renewal Number';
	MsgList['LAB021'] = 'Renewal Date';
	MsgList['LAB022'] = 'Start Date';
	MsgList['LAB023'] = 'End Date';
	MsgList['LAB024'] = 'Coverage by';
	MsgList['LAB025'] = 'Service Level Description';
	MsgList['LAB026'] = 'Service Contract Notes';
	MsgList['LAB027'] = 'Services Covered';
	MsgList['LAB028'] = 'Contacts Covered';
	MsgList['LAB029'] = 'Sites Covered';
	MsgList['LAB030'] = 'Invoice Required';
	MsgList['LAB031'] = 'Loander Provided';
	MsgList['LAB032'] = 'Onsite Repair';
	MsgList['LAB033'] = 'Walk-in Allowed';
	MsgList['LAB034'] = 'Shipment Allowed';
	MsgList['LAB035'] = 'RMA Required';
	MsgList['LAB036'] = 'Transferable';
	MsgList['LAB037'] = 'Exclusions';
	MsgList['LAB038'] = 'Clear Selection';
	}
}
/*================================================================================================*/
// Get the message for the given message number from the global hash table.
// Return "setup-issue" if the message is not found
function SVMXC_GetMessage(MsgNum)
{
    if (!MsgList[MsgNum])
    	return "Message definition for " + MsgNum + " not found. This is a setup issue.\nPlease contact your ServiceMax administrator to resolve this.";

    return MsgList[MsgNum];
}
/*================================================================================================*/
function createTag(parent, name, keyvalPairs)
{
    var ret;
    var browser = navigator.appName;
    if (browser == "Microsoft Internet Explorer") {
	    var trTag = "<"+name+" ";
	    for (key in keyvalPairs) {
			    trTag += key + "=\"" + keyvalPairs[key] + "\"";
	    }
	    trTag += ">";
	    ret = document.createElement(trTag);
    } else {
	    ret = document.createElement(name);
	    for (key in keyvalPairs) {
		    ret.setAttribute(key, keyvalPairs[key]);
	    }
    }
    parent.appendChild(ret);
    return ret;
}
/*=====================================================================================*/
function drawMsg(ta,msg)
{
    if (!ta) ta = document.getElementById("list_tbody");
    clear_table( ta );
    var tr = makeRow({'class':'headerRow'});ta.appendChild(tr);
    createTag(tr,"th",{'class':'actionColumn','scope':'col'}).innerHTML = msg;
}
/*=====================================================================================*/
function clear_table(tbody)
{
    if (!tbody) tbody = document.getElementById("list_tbody");
    while (tbody.rows.length > 0) 	{ tbody.deleteRow(0); }
}
/*=====================================================================================*/
function makeAttrs(i,ta)
{
    var atts = new Object();
    // how many rows in this table so far
    try { ta.even } catch (e) { ta.even = i};
    if (i==0) { // skin stuff
	    atts["class"] = "even first";
    } else if (ta.even == true) {
	    atts["class"] = "even";
    } else {
	    atts["class"] = "odd";
    }
    ta.even = !ta.even;
    atts["onmouseout"] = "if (typeof(hiOff) != 'undefined' && this.active == false){hiOff(this);}";
    atts["onmouseover"] = "if (typeof(hiOn) != 'undefined'){hiOn(this);}";
    return atts;
}
/*=====================================================================================*/
function makeRow(atts)
{
    var browser = navigator.appName;
    if (browser == "Microsoft Internet Explorer") {
	    var trTag = "<TR ";
	    for (key in atts) {
		    trTag += key + "=\"" + atts[key] + "\"";
	    }
	    trTag += ">";
	    var ret = document.createElement(trTag);
    } else {
	    var tr = document.createElement("TR");
	    for (key in atts) {
		    tr.setAttribute(key, atts[key]);
	    }
	    var ret = tr;
    }
    ret.active = false;
    return ret;
}
/*=====================================================================================*/

var foldersTree;

//To customize the tree, overwrite these variables in the configuration file (demoFramesetNode.js, etc.)
var USETEXTLINKS = 1;
var STARTALLOPEN = 1;
var USEFRAMES = 0;
var USEICONS = 0;
var WRAPTEXT = 1;
var PERSERVESTATE = 0; //backward compatibility
var PRESERVESTATE = 0;
var ICONPATH = parent.window.location.protocol + "//" + parent.window.location.host + "/img/tree/";
var HIGHLIGHT = 0;
var HIGHLIGHT_COLOR = 'blue';
var HIGHLIGHT_BG    = 'white';
var BUILDALL = 0;
var GLOBALTARGET = "R"; // variable only applicable for addChildren uses


//Other variables
var lastClicked = null;
var lastClickedColor;
var lastClickedBgColor;
var indexOfEntries = new Array 
var nEntries = 0 
var browserVersion = 1 
var selectedFolder=0
var lastOpenedFolder=null
var t=5
var doc = document
var supportsDeferral = false

doc.yPos = 0

if(typeof HTMLElement!="undefined" && !HTMLElement.prototype.insertAdjacentElement){
	HTMLElement.prototype.insertAdjacentElement = function (where,parsedNode)
	{
		switch (where){
		case 'BeforeBegin':
			this.parentNode.insertBefore(parsedNode,this)
			break;
		case 'AfterBegin':
			this.insertBefore(parsedNode,this.firstChild);
			break;
		case 'BeforeEnd':
			this.appendChild(parsedNode);
			break;
		case 'AfterEnd':
			if (this.nextSibling) 
				this.parentNode.insertBefore(parsedNode,this.nextSibling);
			else this.parentNode.appendChild(parsedNode);
			break;
		}
	}

	HTMLElement.prototype.insertAdjacentHTML = function(where,htmlStr)
	{
		var r = this.ownerDocument.createRange();
		r.setStartBefore(this);
		var parsedHTML = r.createContextualFragment(htmlStr);
		this.insertAdjacentElement(where,parsedHTML)
	}
}

function xbDetectBrowser()
{
  var oldOnError = window.onerror;
  var element = null;

  window.onerror = null;
  
  // work around bug in xpcdom Mozilla 0.9.1
  window.saveNavigator = window.navigator;

  navigator.OS    = '';
  navigator.version  = parseFloat(navigator.appVersion);
  navigator.org    = '';
  navigator.family  = '';

  var platform;
  if (typeof(window.navigator.platform) != 'undefined')
  {
    platform = window.navigator.platform.toLowerCase();
    if (platform.indexOf('win') != -1)
      navigator.OS = 'win';
    else if (platform.indexOf('mac') != -1)
      navigator.OS = 'mac';
    else if (platform.indexOf('unix') != -1 || platform.indexOf('linux') != -1 || platform.indexOf('sun') != -1)
      navigator.OS = 'nix';
  }

  var i = 0;
  var ua = window.navigator.userAgent.toLowerCase();
  
  if (ua.indexOf('safari') != -1)
  {
    i = ua.indexOf('safari');
    navigator.family = 'safari';
    navigator.org = 'safari';
    navigator.version = parseFloat('0' + ua.substr(i+7), 10);
  }
  else if (ua.indexOf('opera') != -1)
  {
    i = ua.indexOf('opera');
    navigator.family  = 'opera';
    navigator.org    = 'opera';
    navigator.version  = parseFloat('0' + ua.substr(i+6), 10);
  }
  else if ((i = ua.indexOf('msie')) != -1)
  {
    navigator.org    = 'microsoft';
    navigator.version  = parseFloat('0' + ua.substr(i+5), 10);
    
    if (navigator.version < 4)
      navigator.family = 'ie3';
    else
      navigator.family = 'ie4'
  }
  else if (ua.indexOf('gecko') != -1)
  {
    navigator.family = 'gecko';
    var rvStart = ua.indexOf('rv:');
    var rvEnd   = ua.indexOf(')', rvStart);
    var rv      = ua.substring(rvStart+3, rvEnd);
    var rvParts = rv.split('.');
    var rvValue = 0;
    var exp     = 1;

    for (var i = 0; i < rvParts.length; i++)
    {
      var val = parseInt(rvParts[i]);
      rvValue += val / exp;
      exp *= 100;
    }
    navigator.version = rvValue;

    if (ua.indexOf('netscape') != -1)
      navigator.org = 'netscape';
    else if (ua.indexOf('compuserve') != -1)
      navigator.org = 'compuserve';
    else
      navigator.org = 'mozilla';
  }
  else if ((ua.indexOf('mozilla') !=-1) && (ua.indexOf('spoofer')==-1) && (ua.indexOf('compatible') == -1) && (ua.indexOf('opera')==-1)&& (ua.indexOf('webtv')==-1) && (ua.indexOf('hotjava')==-1))
  {
    var is_major = parseFloat(navigator.appVersion);
    
    if (is_major < 4)
      navigator.version = is_major;
    else
    {
      i = ua.lastIndexOf('/')
      navigator.version = parseFloat('0' + ua.substr(i+1), 10);
    }
    navigator.org = 'netscape';
    navigator.family = 'nn' + parseInt(navigator.appVersion);
  }
  else if ((i = ua.indexOf('aol')) != -1 )
  {
    // aol
    navigator.family  = 'aol';
    navigator.org    = 'aol';
    navigator.version  = parseFloat('0' + ua.substr(i+4), 10);
  }
  else if ((i = ua.indexOf('hotjava')) != -1 )
  {
    // hotjava
    navigator.family  = 'hotjava';
    navigator.org    = 'sun';
    navigator.version  = parseFloat(navigator.appVersion);
  }

  window.onerror = oldOnError;
}

// ***************************************************************** 
function Folder(folderDescription, hreference) //constructor 
{ 
  //constant data 
  this.desc = folderDescription; 
  this.hreference = hreference;
  this.id = -1;
  this.navObj = 0;
  this.iconImg = 0; 
  this.nodeImg = 0;
  this.iconSrc = ICONPATH + "ftv2folderopen.gif";
  this.iconSrcClosed = ICONPATH + "ftv2folderclosed.gif";
  this.children = new Array;
  this.nChildren = 0;
  this.level = 0;
  this.leftSideCoded = "";
  this.isLastNode=false;
  this.parentObj = null;
  this.maySelect=true;
  this.prependHTML = ""
 
  //dynamic data 
  this.isOpen = false
  this.isLastOpenedFolder = false
  this.isRendered = 0
 
  //methods 
  this.initialize = initializeFolder 
  this.setState = setStateFolder 
  this.addChild = addChild 
  this.addChildren = addChildren
  this.createIndex = createEntryIndex 
  this.escondeBlock = escondeBlock
  this.esconde = escondeFolder 
  this.folderMstr = folderMstr 
  this.renderOb = drawFolder 
  this.totalHeight = totalHeight 
  this.subEntries = folderSubEntries 
  this.linkHTML = linkFolderHTML
  this.blockStartHTML = blockStartHTML
  this.blockEndHTML = blockEndHTML
  this.nodeImageSrc = nodeImageSrc
  this.iconImageSrc = iconImageSrc
  this.getID = getID
  this.forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders
} 
 
function initializeFolder(level, lastNode, leftSide) 
{ 
  var i=0       
  nc = this.nChildren 
   
  this.createIndex() 
  this.level = level
  this.leftSideCoded = leftSide

  if (browserVersion == 0 || STARTALLOPEN==1)
    this.isOpen=true;

  if (level>0)
    if (lastNode) //the last child in the children array 
		leftSide = leftSide + "0"
	else
		leftSide = leftSide + "1"

  this.isLastNode = lastNode
 
  if (nc > 0) 
  { 
    level = level + 1 
    for (i=0 ; i < this.nChildren; i++)  
    {
      if (typeof this.children[i].initialize == 'undefined') //document node was specified using the addChildren function
      {
        if (typeof this.children[i][0] == 'undefined' || typeof this.children[i] == 'string')
        {
          this.children[i] = ["item incorrectly defined", ""];
        }

        //Basic initialization of the Item object
        //These members or methods are needed even before the Item is rendered
        this.children[i].initialize=initializeItem;
        this.children[i].createIndex=createEntryIndex;
        if (typeof this.children[i].maySelect == 'undefined')
          this.children[i].maySelect=true
        this.children[i].forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders
      }
      if (i == this.nChildren-1) 
        this.children[i].initialize(level, 1, leftSide)
      else 
        this.children[i].initialize(level, 0, leftSide)
    } 
  } 
} 
 
function drawFolder(insertAtObj) 
{ 
    var nodeName = ""
    var auxEv = ""
    var docW = ""
    var i=0

    finalizeCreationOfChildDocs(this);

    var leftSide = leftSideHTML(this.leftSideCoded);

    auxEv = "<a href='javascript:clickOnNode(\"" + this.getID()+ "\")'>" ;

    nodeName = this.nodeImageSrc();
 
    if (this.level>0) 
	{
	if (this.isLastNode) //the last child in the children array 
	    leftSide = leftSide + "<td valign=top>" + auxEv + "<img name='nodeIcon" + this.id + "' id='nodeIcon" + this.id + "' src='" + nodeName + "' width=20 height=16 border=0></a></td>"
	else 
	    leftSide = leftSide + "<td valign=top background=" + ICONPATH + "chain.gif>" + auxEv + "<img name='nodeIcon" + this.id + "' id='nodeIcon" + this.id + "' src='" + nodeName + "' width=20 height=16 border=0></a></td>"
	}
    this.isRendered = 1

    docW = this.blockStartHTML("folder");

    docW = docW + "<tr>" + leftSide + "<td valign=top>";
    if (USEICONS)
	{
	docW = docW + this.linkHTML(false) 
	docW = docW + "<img id='folderIcon" + this.id + "' name='folderIcon" + this.id + "' src='" + this.iconImageSrc() + "' border=0></a>"
	}
    else
	{
	if (this.prependHTML == "")
	    docW = docW + "<img src=" + ICONPATH + "empty.gif height=16 width=20>"
	}
    docW = docW + "</td>"+this.prependHTML+"<td valign=middle width=100%>"

    if (USETEXTLINKS) 
	{ 
	docW = docW + this.linkHTML(true) 
	docW = docW + this.desc + "</a>"
	} 
    else 
	docW = docW + this.desc

    docW = docW + "</td>"
    docW = docW + this.blockEndHTML()

    if (insertAtObj == null)
	{
	if (supportsDeferral) {
	    insertAtObj = getElById("domRoot")
	    insertAtObj.insertAdjacentHTML("BeforeEnd", docW)
	    }
	else
	    {
	    doc.write(docW)
	    }
	}
    else
	{
	insertAtObj.insertAdjacentHTML("AfterEnd", docW)
	}
 
    this.navObj = getElById("folder"+this.id)

    if (USEICONS)
      this.iconImg = getElById("folderIcon"+this.id) 

    this.nodeImg = getElById("nodeIcon"+this.id)
} 
 
function setStateFolder(isOpen) 
{ 
  var subEntries 
  var totalHeight 
  var fIt = 0 
  var i=0 
  var currentOpen
 
  if (isOpen == this.isOpen) 
    return 
 
  this.isOpen = isOpen;

  if (!this.isOpen && this.isLastOpenedfolder)
  {
	lastOpenedFolder = null;
	this.isLastOpenedfolder = false;
  }
  propagateChangesInState(this) 
} 
 
function propagateChangesInState(folder) 
{   
    var i=0 

	//Change icon
    if (folder.nChildren > 0 && folder.level>0)  //otherwise the one given at render stays
	folder.nodeImg.src = folder.nodeImageSrc()

	//Change node
    if (USEICONS)
	folder.iconImg.src = folder.iconImageSrc()

	//Propagate changes
    for (i=folder.nChildren-1; i>=0; i--)
	{
	if (folder.isOpen) 
	    folder.children[i].folderMstr(folder.navObj)
	else 
	    folder.children[i].esconde() 
	}
} 
 
function escondeFolder() 
{ 
  this.escondeBlock()
   
  this.setState(0) 
} 
 
function linkFolderHTML(isTextLink) 
{
    var txtstyle = "";
    var docW = "";

    if (this.hreference) 
	{ 
	if (this.hreference.substring(0,16) == "/" + InstProdId.substring(0,15)) { txtstyle = "style=\'color:blue; background-color:LightBlue\'"; }

	if (USEFRAMES)
	    docW = docW + "<a " + txtstyle + " href='" + this.hreference + "' TARGET=\"basefrm\" "
	else
	    docW = docW + "<a " + txtstyle + " href='" + this.hreference + "' TARGET=_blank "

	if (isTextLink) {
	    docW += "id=\"itemTextLink"+this.id+"\" ";
	    }

	docW = docW + "onClick='javascript:clickOnFolder(\""+this.getID()+"\")'"
	docW = docW + ">"
	} 
    else 
	{
	txtstyle = "style=\'color:blue; background-color:LightBlue\'";
	docW = docW + "<a " + txtstyle + ">" 
	}

    return docW;
} 
 
function addChild(childNode) 
{ 
  this.children[this.nChildren] = childNode 
  childNode.parentObj = this
  this.nChildren++ 
  return childNode 
} 

//The list can contain either a Folder object or a sub list with the arguments for Item 
function addChildren(listOfChildren) 
{ 
  this.children = listOfChildren 
  this.nChildren = listOfChildren.length
  for (i=0; i<this.nChildren; i++)
    this.children[i].parentObj = this
} 

function folderSubEntries() 
{ 
  var i = 0 
  var se = this.nChildren 
 
  for (i=0; i < this.nChildren; i++){ 
    if (this.children[i].children) //is a folder 
      se = se + this.children[i].subEntries() 
  } 
 
  return se 
} 

function nodeImageSrc() {
  var srcStr = "";

  if (this.isLastNode) //the last child in the children array 
  { 
    if (this.nChildren == 0)
      srcStr = ICONPATH + "nodeEnd.gif"
    else
      if (this.isOpen)
        srcStr = ICONPATH + "minusEnd.gif"  
      else
        srcStr = ICONPATH + "plusEnd.gif"  
  } 
  else 
  { 
    if (this.nChildren == 0)
      srcStr = ICONPATH + "node.gif"
    else
      if (this.isOpen)
        srcStr = ICONPATH + "minus.gif"
      else
        srcStr = ICONPATH + "plus.gif"
  }   
  return srcStr;
}

function iconImageSrc() {
  if (this.isOpen)
    return(this.iconSrc)
  else
    return(this.iconSrcClosed)
} 
 
function Item(itemDescription) // Constructor 
{ 
  // constant data 
  this.desc = itemDescription 

  this.level = 0
  this.isLastNode = false
  this.leftSideCoded = ""
  this.parentObj = null

  this.maySelect=true

  this.initialize = initializeItem;
  this.createIndex = createEntryIndex;
  this.forceOpeningOfAncestorFolders = forceOpeningOfAncestorFolders;

  finalizeCreationOfItem(this)
} 

//Assignments that can be delayed when the item is created with folder.addChildren
//The assignments that cannot be delayed are done in addChildren and in initializeFolder
//Additionaly, some assignments are also done in finalizeCreationOfChildDocs itself
function finalizeCreationOfItem(itemArray)
{
  itemArray.navObj = 0 //initialized in render() 
  itemArray.iconImg = 0 //initialized in render() 
  itemArray.iconSrc = ICONPATH + "ftv2doc.gif" 
  itemArray.isRendered = 0
  itemArray.nChildren = 0
  itemArray.prependHTML = ""
 
  // methods 
  itemArray.escondeBlock = escondeBlock
  itemArray.esconde = escondeBlock
  itemArray.folderMstr = folderMstr 
  itemArray.renderOb = drawItem 
  itemArray.totalHeight = totalHeight 
  itemArray.blockStartHTML = blockStartHTML
  itemArray.blockEndHTML = blockEndHTML
  itemArray.getID = getID
}

function initializeItem(level, lastNode, leftSide) 
{  
  this.createIndex() 
  this.level = level
  this.leftSideCoded = leftSide
  this.isLastNode = lastNode
} 
 
function drawItem(insertAtObj) 
{ 
    var leftSide = leftSideHTML(this.leftSideCoded);
    var docW = "";

    var fullLink = "href=\""+this.link+"\" target=\""+ this.target + "\" onClick=\"clickOnLink('"+this.getID()+"\', '"+this.link+"','"+this.target+"');return false;\"";
    this.isRendered = 1

    if (this.level>0) 
    	{
	if (this.isLastNode) //the last 'brother' in the children array 
	    { 
	    leftSide = leftSide + "<td valign=top><img src='" + ICONPATH + "nodeEnd.gif' width=20 height=16></td>"
	    } 
	else 
	    { 
	    leftSide = leftSide + "<td valign=top background=" + ICONPATH + "chain.gif><img src='" + ICONPATH + "node.gif' width=20 height=16></td>"
	    } 
	}

    docW = docW + this.blockStartHTML("item")

    docW = docW + "<tr>" + leftSide + "<td valign=top>"
    if (USEICONS)
	docW = docW + "<a " + fullLink + " id=\"itemIconLink"+this.id+"\">" + "<img id='itemIcon"+this.id+"' " + "src='"+this.iconSrc+"' border=0>" + "</a>"
    else
	if (this.prependHTML == "")
	    docW = docW + "<img src=" + ICONPATH + "empty.gif height=16 width=20>"

    docW = docW + "</td>"+this.prependHTML+"<td valign=middle width=100%>"

    if (USETEXTLINKS) 
	docW = docW + "<a " + fullLink + " id=\"itemTextLink"+this.id+"\">" + this.desc + "</a>"
    else 
	docW = docW + this.desc

    docW = docW + "</td>"
    docW = docW + this.blockEndHTML()

    if (insertAtObj == null)
	{
	doc.write(docW)
	}
    else
	{
	insertAtObj.insertAdjacentHTML("AfterEnd", docW)
	}

    this.navObj = getElById("item"+this.id)

    if (USEICONS)
	this.iconImg = getElById("itemIcon"+this.id)
} 
 
// Methods common to both objects (pseudo-inheritance) 
// ******************************************************** 
 
function forceOpeningOfAncestorFolders() {
  if (this.parentObj == null || this.parentObj.isOpen)
    return
  else {
    this.parentObj.forceOpeningOfAncestorFolders()
    clickOnNodeObj(this.parentObj)
  }
}

function escondeBlock() 
{ 
    if (this.navObj.style.display == "none") 
      return 
    this.navObj.style.display = "none" 
} 
 
function folderMstr(domObj) 
{ 
  if (!this.isRendered)
     this.renderOb(domObj)
  else
    this.navObj.style.display = "block" 
} 

function blockStartHTML(idprefix) {
  var idParam = "id='" + idprefix + this.id + "'"
  var docW = ""

    docW = "<div " + idParam + " style='display:block;'>"
     
  docW = docW + "<table border=0 cellspacing=0 cellpadding=0 width=100% >"

  return docW
}

function blockEndHTML() {
  var docW = ""

  docW = "</table>"
   
docW = docW + "</div>"

  return docW
}
 
function createEntryIndex() 
{ 
  this.id = nEntries 
  indexOfEntries[nEntries] = this 
  nEntries++ 
} 
 
// total height of subEntries open 
function totalHeight() //used with browserVersion == 2 
{ 
  var h = this.navObj.clip.height 
  var i = 0 
   
  if (this.isOpen) //is a folder and _is_ open 
    for (i=0 ; i < this.nChildren; i++)  
      h = h + this.children[i].totalHeight() 
 
  return h 
} 


function leftSideHTML(leftSideCoded) {
	var i;
	var retStr = "";

	for (i=0; i<leftSideCoded.length; i++)
	{
		if (leftSideCoded.charAt(i) == "1")
		{
			retStr = retStr + "<td valign=top background=" + ICONPATH + "chain.gif><img src='" + ICONPATH + "chain.gif' width=20 height=16></td>"
		}
		if (leftSideCoded.charAt(i) == "0")
		{
			retStr = retStr + "<td valign=top><img src='" + ICONPATH + "empty.gif' width=20 height=16></td>"
		}
	}
	return retStr
}

function getID()
{
  //define a .xID in all nodes (folders and items) if you want to PERVESTATE that
  //work when the tree changes. The value eXternal value must be unique for each
  //node and must node change when other nodes are added or removed
  //The value may be numeric or string, but cannot have the same char used in cookieCutter
  if (typeof this.xID != "undefined") 
    return this.xID
  else
    return this.id
}

 
// Events 
// ********************************************************* 
 
function clickOnFolder(folderId) 
{ 
  var clicked = findObj(folderId)

  if (typeof clicked=='undefined' || clicked==null)
  {
    alert("Treeview was not able to find the node object corresponding to ID=" + folderId + ". If the configuration file sets a.xID values, it must set them for ALL nodes, including the foldersTree root.")
    return;
  }

  if (!clicked.isOpen) {
    clickOnNodeObj(clicked) 
  }

  if (lastOpenedFolder != null && lastOpenedFolder != folderId)
    clickOnNode(lastOpenedFolder); //sets lastOpenedFolder to null

  if (clicked.nChildren==0) {
    lastOpenedFolder = folderId;
    clicked.isLastOpenedfolder = true
  }

  if (isLinked(clicked.hreference)) {
      highlightObjLink(clicked);
  }
} 
 
function clickOnNode(folderId) 
{ 
  fOb = findObj(folderId);
  if (typeof fOb=='undefined' || fOb==null)
  {
    alert("Treeview was not able to find the node object corresponding to ID=" + folderId + ". If the configuration file sets a.xID, it must set foldersTree.xID as well.")
    return;
  }

  clickOnNodeObj(fOb);
}

function clickOnNodeObj(folderObj) 
{ 
  var state = 0 
  var currentOpen
 
  state = folderObj.isOpen 
  folderObj.setState(!state) //open<->close  

  if (folderObj.id!=foldersTree.id && PRESERVESTATE)
  {
    if (!folderObj.isOpen) //closing
    {
      currentOpen = currentOpen.replace(folderObj.getID()+cookieCutter, "")
    }
  }
}

function clickOnLink(clickedId, target, windowName) {
    highlightObjLink(findObj(clickedId));
    if (isLinked(target)) {
        window.open(target,windowName);
    }
}

function ld  ()
{
	return document.links.length-1
}
 

// Auxiliary Functions 
// *******************

function finalizeCreationOfChildDocs(folderObj) {
  for(i=0; i < folderObj.nChildren; i++)  {
    child = folderObj.children[i]
    if (typeof child[0] != 'undefined')
    {
      // Amazingly, arrays can have members, so   a = ["a", "b"]; a.desc="asdas"   works
      // If a doc was inserted as an array, we can transform it into an itemObj by adding 
      // the missing members and functions
      child.desc = child[0] 
      setItemLink(child, GLOBALTARGET, child[1])   
      finalizeCreationOfItem(child)
    }
  }
}

function findObj(id)
{
  var i=0;
  var nodeObj;

  if (typeof foldersTree.xID != "undefined") {
    nodeObj = indexOfEntries[i];
    for(i=0;i<nEntries&&indexOfEntries[i].xID!=id;i++) //may need optimization
      ;
    id = i
  }
  if (id >= nEntries)
    return null; //example: node removed in DB
  else
    return indexOfEntries[id];
}

function isLinked(hrefText) {
    var result = true;
    result = (result && hrefText !=null);
    result = (result && hrefText != '');
    result = (result && hrefText.indexOf('undefined') < 0);
    result = (result && hrefText.indexOf('parent.op') < 0);
    return result;
}

// Do highlighting by changing background and foreg. colors of folder or doc text
function highlightObjLink(nodeObj) {
  if (!HIGHLIGHT || nodeObj==null || nodeObj.maySelect==false) {//node deleted in DB 
    return;
  }

var clickedDOMObj = getElById('itemTextLink'+nodeObj.id);
if (clickedDOMObj != null) {
    if (lastClicked != null) {
	var prevClickedDOMObj = getElById('itemTextLink'+lastClicked.id);
	prevClickedDOMObj.style.color=lastClickedColor;
	prevClickedDOMObj.style.backgroundColor=lastClickedBgColor;
    }

    lastClickedColor    = clickedDOMObj.style.color;
    lastClickedBgColor  = clickedDOMObj.style.backgroundColor;
    clickedDOMObj.style.color=HIGHLIGHT_COLOR;
    clickedDOMObj.style.backgroundColor=HIGHLIGHT_BG;
}
  lastClicked = nodeObj;
}

function insFld(parentFolder, childFolder) 
{ 
  return parentFolder.addChild(childFolder) 
} 
 
function insDoc(parentFolder, document) 
{ 
  return parentFolder.addChild(document) 
} 

function gFld(description, hreference) 
{ 
  folder = new Folder(description, hreference);
  return folder;
} 
 
function setItemLink(item, optionFlags, linkData) {
  var targetFlag = "";
  var target = "";
  var protocolFlag = "";
  var protocol = "";

  targetFlag = optionFlags.charAt(0)
  if (targetFlag=="B")
    target = "_blank"
  if (targetFlag=="P")
    target = "_parent"
  if (targetFlag=="R")
    target = "basefrm"
  if (targetFlag=="S")
    target = "_self"
  if (targetFlag=="T")
    target = "_top"

  if (optionFlags.length > 1) {
    protocolFlag = optionFlags.charAt(1)
    if (protocolFlag=="h")
      protocol = "http://"
    if (protocolFlag=="s")
      protocol = "https://"
    if (protocolFlag=="f")
      protocol = "ftp://"
    if (protocolFlag=="m")
      protocol = "mailto:"
  }

  item.link = protocol+linkData;    
  item.target = target
}

function preLoadIcons() {
       arImageSrc = new Array (
           "chain.gif",
           "minusEnd.gif",
           "minus.gif",
           "plusEnd.gif",
           "plus.gif",
           "empty.gif",
           "nodeEnd.gif",
           "node.gif",
           "minusStart.gif",
           "ftv2folderopen.gif",
           "ftv2doc.gif"
           )
       arImageList = new Array ();
       for (counter in arImageSrc) {
           arImageList[counter] = new Image();
           arImageList[counter].src = ICONPATH + arImageSrc[counter];
       }
   }

//Open some folders for initial layout, if necessary
function setInitialLayout() {
  if (browserVersion > 0 && !STARTALLOPEN)
    clickOnNodeObj(foldersTree);
  
  if (!STARTALLOPEN && (browserVersion > 0) && PRESERVESTATE)
		PersistentFolderOpening();
}

//Used with NS4 and STARTALLOPEN
function renderAllTree(nodeObj, parent) {
  var i=0;
  nodeObj.renderOb(parent)
  if (supportsDeferral)
    for (i=nodeObj.nChildren-1; i>=0; i--) 
      renderAllTree(nodeObj.children[i], nodeObj.navObj)
  else
    for (i=0 ; i < nodeObj.nChildren; i++) 
      renderAllTree(nodeObj.children[i], null)
}

function hideWholeTree(nodeObj, hideThisOne, nodeObjMove) {
  var i=0;
  var heightContained=0;
  var childrenMove=nodeObjMove;

  if (hideThisOne)
    nodeObj.escondeBlock()

  for (i=0 ; i < nodeObj.nChildren; i++) {
    heightContainedInChild = hideWholeTree(nodeObj.children[i], true, childrenMove)
  }

  return heightContained;
}


function getElById(idVal) {
  if (document.getElementById != null)
    return document.getElementById(idVal)
  if (document.all != null)
    return document.all[idVal]
  
  alert("Problem getting element by id")
  return null
}


// This function uses an object (navigator) defined in
// ua.js, imported in the main html page (left frame).
function initializeDocument() 
{ 
  preLoadIcons();
  
  supportsDeferral = ((navigator.family=='ie4' && navigator.version >= 5 && navigator.OS != "mac") || browserVersion == 3);
  supportsDeferral = supportsDeferral & (!BUILDALL)

  if (!USEFRAMES && browserVersion == 2)
  	browserVersion = 0;

  eval(String.fromCharCode(116,61,108,100,40,41))

  foldersTree.initialize(0, true, "") 

  if (supportsDeferral && !STARTALLOPEN) {
      foldersTree.renderOb(null) //delay construction of nodes
  }
  else {
    renderAllTree(foldersTree, null);

    //To force the scrollable area to be big enough
    if (browserVersion == 2) 
      doc.write("<layer top=" + indexOfEntries[nEntries-1].navObj.top + ">&nbsp;</layer>") 
  }
} 

// ********************************************************* //
 /*================================================================================================*/
//trims leading spaces
/*================================================================================================*/
function trim(str) //dont change
{
	 if(str.charAt(0) == " ")
	   {
		   str = trim(str.substring(1));
	   }
	 if (str.charAt(str.length-1) == " ")
	   {
			str = trim(str.substring(0,str.length-1));
	   }
  return str;
}
/*=========================================================*/	</fileContent>
    <fileName>SVMXC_CaseEntitlement.js</fileName>
    <name>SVMXC_CaseEntitlement</name>
    <supportsCaching>true</supportsCaching>
</Scontrol>
