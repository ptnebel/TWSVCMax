<apex:page >
    <apex:form >
        <apex:stylesheet value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/css/fullResolution.css')}"/>
        <apex:stylesheet value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/css/dataTables_2-11-2011.css')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/jquery-1.6.2.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/jquery.checkbox.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/jquery.dataTables.min.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/jquery.inherit-1.3.2.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/SVMX_Ajax.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/SVMX_UIParser.js')}"/>
        <apex:includeScript value="{!URLFOR($Resource.SVMXC__SVMXC_resources, 'SVMXC_resources/APL/js/SVMX_Utils.js')}"/>

        <script type="text/javascript">
            var __sfdcSessionId = '{!GETSESSIONID()}';
            var serialselectionholder;
            var rmadetailholder;
            $(document).ready(function(){
                $('input:checkbox:not([safari])').checkbox();
                $('input[safari]:checkbox').checkbox({cls:'jquery-safari-checkbox'});
                $('input:radio').checkbox();
            });
            
            var Browser = {
			  Version: function() {
			    var version = 999; // we assume a sane browser
			    if (navigator.appVersion.indexOf("MSIE") != -1)
			      // bah, IE again, lets downgrade version number
			      version = parseFloat(navigator.appVersion.split("MSIE")[1]);
			    return version;
			  }
			}
			
            // Constants
            var APL003_TAG004 = '{!$Label.APL003_TAG004}';
            var APL003_TAG005 = '{!$Label.APL003_TAG005}';
            var APL002_TAG007 = '{!$Label.APL002_TAG007}';
            var processId = '{!JSENCODE($CurrentPage.parameters.SVMX_processId)}';
            var recordId = '{!JSENCODE($CurrentPage.parameters.SVMX_recordID)}';
        </script>
        <script src="/soap/ajax/15.0/connection.js" type="text/javascript"></script>
        <script src="/soap/ajax/15.0/apex.js" type="text/javascript"></script>
        <script>
        var response;
        SVMXloader.loaderid = 'SVMXloader';
        var isPartialRecordsDisplayed = false;
        var actualModel = new Object();
        actualModel.orderLinefields = new Object();
        actualModel.productsearchfields = ({name:{name:"Name"}, productcode:{name:"ProductCode"}});
        actualModel.orderLines = new Object();
        actualModel.serialNumbers = new Object();
        actualModel.serialNumberfield = ({Id:{name:"Id", label:"", displayable: false, type: 'text'}, name:{name:"serialNumber", label:"{!$Label.APL003_TAG013}", displayable: true, type: 'text'}, status:{name:"SVMXC__Expected_Quantity2__c", label:"{!$Label.APL003_TAG014}", displayable: true, type: 'text'}, reconciliationaction:{name:"SVMXC__Reconciliation_Action__c", label:"{!$Label.APL003_TAG015}", displayable: true, defaultvalue:{none:{key: 'None', value: 'None'}}, type: 'picklist'}});
        actualModel.mapProductRmaLines = new Object();
        actualModel.latestUniqueId = 0;
        actualModel.process = new Object();
        actualModel.header = new Object();
        actualModel.currentSelectedLine = null;
        actualModel.batchCount = 100;
        actualModel.persistentData = new Object();
        actualModel.syncEvents = new Object();
        actualModel.oncePushableIds = new Array();
		actualModel.splitedOrderLines = new Object();
		actualModel.additionalInformation = new Object();
        // Map of serial number and list of order line ids
        actualModel.mapSerialRmaLines = new Object();
        actualModel.mapKeyValue = new Array();
        actualModel.errorMessage = "";
        actualModel.processUI = {title: {object:'process', UIid: 'processtitle', field: 'SVMXC__ProcessID__c'}, documentname: {object:'header', UIid: 'documentname', field: 'Name'}, depotname: {object:'header', UIid: 'depotname', field: 'SVMXC__Warehouse__c'},
                             receivinglocation: {object:'header', UIid: 'receivinglocation', field: 'SVMXC__Source_Street__c'}, orderstatus: {object:'header', UIid: 'orderstatus', field: 'SVMXC__Order_Status__c'}};
        
        var sr = new SOAPRequest({orgNameSpace: "SVMXC", sessionId : __sfdcSessionId, endPointName: "INTF_WebServicesDef"});
            
        function populateUniqueId()
        {
            actualModel.latestUniqueId = actualModel.latestUniqueId + 1;
            return actualModel.latestUniqueId;
        }
        
        function addSerialSelection(lineId, serialNumbers)
        {
            for(key in serialNumbers)
            {
                var reconcilationOptions;
                var status;
                if(serialNumbers[key].isExpected == 'true')
                {
                    if(serialNumbers[key].isPicked == 'true')
                        status = '<div id="Status_' + lineId + ':' + key + '">{!$Label.APL002_TAG030}</div>';
                    else
                        status = '<div id="Status_' + lineId + ':' + key + '">{!$Label.APL002_TAG031}</div>';
                }
                else
                {
                    if(serialNumbers[key].isPicked == 'true')
                        status = '<div id="Status_' + lineId + ':' + key + '">{!$Label.APL002_TAG030}</div>';
                    else
                        status = '<div id="Status_' + lineId + ':' + key + '">{!$Label.APL002_TAG033}</div>';
                }
                if(serialNumbers[key].isExpected == 'true')
                {
                	if(serialNumbers[key].isPicked == 'true')
	                {
	                    reconcilationOptions = "<select  onchange='updateReconciliationAction( \"" + lineId + "\", \"" + key + "\", this.value, false)'><option value='Add'>{!$Label.COMM001_TAG036}</option><option value='Remove'>{!$Label.COMM001_TAG038}</option></select>";
	                }
	                else
                    	reconcilationOptions = "<select><option value='None'>{!$Label.COMM001_TAG035}</option></select>";
                }
                else
                {
                	if(serialNumbers[key].isPicked == 'true')
                    	reconcilationOptions = "<select  onchange='updateReconciliationAction( \"" + lineId + "\", \"" + key + "\", this.value)'><option value='Add'>{!$Label.COMM001_TAG036}</option><option value='Remove'>{!$Label.COMM001_TAG037}</option></select>";
                    else
                    	reconcilationOptions = "<select><option value='None'>{!$Label.COMM001_TAG035}</option></select>";
                }
                serialselectionholder.fnAddData( [
                    serialNumbers[key].serialNumber, status, reconcilationOptions
                ] );
            }
        }
        
        function addNewProduct(product)
        {
            var record = buildProductOnlyRecord(product);
            addProductToActualModel(record);
            actualModel.selectedProduct[0] = record.Id;
            var uX = new UIDesigner({});
            var lineRecord = new Object();
            lineRecord.SVMXC__Product__c = product.Id;
            lineRecord['SVMXC__Product__r.Name'] = product.Name;
            lineRecord['SVMXC__Product__r.ProductCode'] = product.ProductCode;
            var productProperties = new Array;
            for(key in actualModel.orderLinefields)
            {
                if(actualModel.orderLinefields[key].displayable == true)
                    productProperties.push(uX.__populatedivStringForField(actualModel.orderLinefields[key], lineRecord, key, record.Id));
            }
            rmadetailholder.fnAddData(productProperties);
            var lineIds = new Array();
            lineIds.push(record.Id);
            actualModel.mapProductRmaLines[product.Name] = lineIds;
            actualModel.mapProductRmaLines[product.ProductCode] = lineIds;
            clearSerialSelection();
        }
        
        function buildProductOnlyRecord(product)
        {
            var record = new Object();
            record.Id = 'UNIQUEID_' + populateUniqueId();
            record.SVMXC__Product__r = product;
            record.SVMXC__Picked_Qty__c = 1;
            return record;
        }
        
        function addProductToActualModel(record)
        {
            var actualRecord = {};
            for(key in actualModel.orderLinefields)
            {
                if(actualModel.orderLinefields[key].reference && record[actualModel.orderLinefields[key].reference] != null)
                {
                    var ref = record[actualModel.orderLinefields[key].reference];
                    actualRecord[key] = record[actualModel.orderLinefields[key].name];
                    for(refKey in actualModel.orderLinefields[key].referencefields)
                    {
                        actualRecord[actualModel.orderLinefields[key].reference+'.'+actualModel.orderLinefields[key].referencefields[refKey].name] = ref[actualModel.orderLinefields[key].referencefields[refKey].name];
                    }
                }
                else if(record[actualModel.orderLinefields[key].name])
                {
                    actualRecord[actualModel.orderLinefields[key].name] = record[actualModel.orderLinefields[key].name];
                }
                else if(actualModel.orderLinefields[key].defaultvalue != null && (actualModel.orderLinefields[key].type == 'text' || actualModel.orderLinefields[key].type == 'number'))
                {
                    actualRecord[actualModel.orderLinefields[key].name] = actualModel.orderLinefields[key].defaultvalue;
                }
            }
            actualModel.orderLines[record.Id] = actualRecord;
        }

        function populateSerialSelectionforProduct(product)
        {
            var uX = new UIDesigner({UIElement: 'serialSelection', paintFields: actualModel.serialNumberfield, displayRecords: null});
            uX.__paintGridUI();
            serialselectionholder = $('#tableserialSelection').dataTable( {
                "bPaginate": false,"bSort": false
            } );
            actualModel.selectedProduct = new Array();
            if(actualModel.mapProductRmaLines[product])
            {
                var isSerialNumberFound = false;
                for (var j=0; j< actualModel.mapProductRmaLines[product].length; j++)
                {
                    // Do uniquness check
                    if($.inArray(actualModel.mapProductRmaLines[product][j], actualModel.selectedProduct) > -1)
                        continue;
                    // Adding selected line id's for temp use
                    actualModel.selectedProduct.push(actualModel.mapProductRmaLines[product][j]);
                    if(actualModel.currentSelectedLine == null)
                    addSerialSelection(actualModel.mapProductRmaLines[product][j], actualModel.serialNumbers[actualModel.mapProductRmaLines[product][j]]);
                    isSerialNumberFound = false;
                }
            }
            radioInitializer();
        }
        function initiateProductReceipt(product)
        {
            rmadetailholder.fnFilter(product , null, false, false, false);
            if(product != null || product != '')
            {
                if(actualModel.mapProductRmaLines[product] != null)
                {
                    // Product is available and we need to find the serial numbers
                    populateSerialSelectionforProduct(product);
                }
                else if(actualModel.process.SVMXC__APL_Action_On_Unexpected_Product__c == 'ADD')
                {
                    // Go and find whether the product is available on product
                    var productResponse = findProductAvailability(product);
                    if(productResponse.size > 0 && productResponse.records != null)
                    {
                        if(!productResponse.records.length)
                            addNewProduct(productResponse.records);
                        else
                            addNewProduct(productResponse.records[0]);
                    }
                }
            }
        }
        
        function showLinesForSerialNumber(availableOrderLines)
        {
        	actualModel.orderLinesForSerialNumber = new Object();
        	for (var prodCount = 0; prodCount < availableOrderLines.length; prodCount++)
	        {
	        	actualModel.orderLinesForSerialNumber[availableOrderLines[prodCount]] = actualModel.orderLines[availableOrderLines[prodCount]];
	        }
	        
        	var uX = new UIDesigner({UIElement: 'rmadetails', paintFields: actualModel.orderLinefields, displayRecords: actualModel.orderLinesForSerialNumber});
            uX.__paintGridUI();
            isPartialRecordsDisplayed = true;
            buildDataTableUI();
        }
        
        function setLocalStorage()
        {
            //localStorage.setItem('actualModel', JSON.stringify(actualModel));
        }
        
        function showAllLines()
        {
        	isPartialRecordsDisplayed = false;
        	var uX = new UIDesigner({UIElement: 'rmadetails', paintFields: actualModel.orderLinefields, displayRecords: actualModel.orderLines});
            uX.__paintGridUI();
            buildDataTableUI();
        }
        
        function clearSerialSelection()
        {
            serialselectionholder.fnClearTable();
        }
        
        function buildSerialNumberUI(rmaLineId)
        {
            clearSerialSelection();
            addSerialSelection(rmaLineId, actualModel.serialNumbers[rmaLineId]);
            //paintUI('serialSelection', actualModel.serialNumberfield, actualModel.serialNumbers[rmaLineId]);
            radioInitializer();
        }
        
        function radioInitializer()
        {
            $('input:checkbox:not([safari])').checkbox();
            $('input[safari]:checkbox').checkbox({cls:'jquery-safari-checkbox'});
            $('input:radio').checkbox();
        }
        
        function onblurProductSelection(elementId)
        {
            var item = document.getElementById(elementId);
            initiateProductReceipt(item.value);
            if(item.value == null || item.value == '')
            {
                item.value = APL003_TAG005;
                clearSerialSelection();
                showAllLines();
            }
            var itemSerialSelection = document.getElementById('serialnumber');
            itemSerialSelection.value = APL003_TAG004;
            instantiateClickInterface();
			loadTags();
        }
        
        function updateReconciliationAction(lineDetailId, serialNumber, action)
        {
            var availableSerialNumbers = actualModel.serialNumbers[lineDetailId];
            if(availableSerialNumbers == null)
                availableSerialNumbers = new Object;
            else if(availableSerialNumbers[serialNumber] == null)
                availableSerialNumbers[serialNumber] = new Object;
            availableSerialNumbers[serialNumber].reconciliationAction = action;
            
            if(action == 'Remove')
            {
            	availableSerialNumbers[serialNumber].isPicked = 'false';
            	actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) - 1;
            	updateUIPickedQuantity(lineDetailId);
            	if(availableSerialNumbers[serialNumber].isExpected == 'true')
            		updateUISerialNumberStatus(lineDetailId, serialNumber, '{!$Label.APL002_TAG031}');
            	else
            		updateUISerialNumberStatus(lineDetailId, serialNumber, '{!$Label.APL002_TAG033}');
            }
            else if(action == 'Add')
            {
            	availableSerialNumbers[serialNumber].isPicked = 'true';
            	actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) + 1;
            	updateUIPickedQuantity(lineDetailId);
            	updateUISerialNumberStatus(lineDetailId, serialNumber, '{!$Label.APL002_TAG030}');
            }
        }
        
        // To add new serial number if its new or already added
        function addNewSerialNumber(lineDetailId, serialNumber)
        {
            var availableSerialNumbers = actualModel.serialNumbers[lineDetailId];
            // Create new serial number object
            var newSerialNumber = new Object();
            newSerialNumber.serialNumber = serialNumber;
            newSerialNumber.isExpected = null;
            newSerialNumber.isPicked = 'true';
            newSerialNumber.isReceived = null;
            newSerialNumber.isShipped = null;
            newSerialNumber.reconciliationAction = 'Add';
            if(availableSerialNumbers == null)
                availableSerialNumbers = new Object;
            else if(availableSerialNumbers[serialNumber] == null)
                availableSerialNumbers[serialNumber] = new Object;
            availableSerialNumbers[serialNumber] = newSerialNumber;
            actualModel.serialNumbers[lineDetailId] = availableSerialNumbers;
        }
        
        function incrementReceivedQuantity(lineDetailId, serialNumber)
        {
        	/*
        	if(!actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c || actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c == null || actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c == '')
           		actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c = 'NOT ALLOWED'
            if(actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c == 'ADD')
            {
                actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) + 1;
                // Update the retrieved count
                updateUIPickedQuantity(lineDetailId)
                return true;
            }
            else if(actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c == 'NOT ALLOWED')
            {
                if(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c < actualModel.orderLines[lineDetailId].SVMXC__Expected_Quantity2__c)
                {
                    actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) + 1;
                    // Update the retrieved count
                    updateUIPickedQuantity(lineDetailId)
                    return true;
                }
                else
                {
                    // Don't increment and don't add
                    return false;
                }
            }*/
            
            var isValid = false;
            //if(!actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c)
            actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c = 'NOT ALLOWED'
            if(actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c == 'ADD')
            {
                actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) + 1;
                // Update the retrieved count
                updateUIPickedQuantity(lineDetailId);
                isValid = true;
            }
            else if(actualModel.process.SVMXC__APL_Action_On_Excess_Qty__c == 'NOT ALLOWED')
            {
                if(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c < actualModel.orderLines[lineDetailId].SVMXC__Expected_Quantity2__c)
                {
                    actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) + 1;
                    // Update the retrieved count
                    updateUIPickedQuantity(lineDetailId);
                    isValid = true;
                }
                else
                {
                    // Don't increment and don't add
                    isValid = false;
                }
            }
            if(isValid == true)
            {
                // If serial number is expected to receive
                if(actualModel.serialNumbers[lineDetailId][serialNumber].isPicked != 'true')
                {
                    actualModel.serialNumbers[lineDetailId][serialNumber].isPicked = 'true';
                }// If serial number already received
                else
                {
                    //addNewSerialNumber(actualModel.selectedProduct[selectedProductCount], item.value);
                    // Decrement the Actual Quantity that we have incremented earlier
                    actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c = parseInt(actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c) - 1;
			        // Update the retrieved count
			        updateUIPickedQuantity(lineDetailId);
                }
            }
            return isValid;
        }
        
        function updateUIPickedQuantity(lineDetailId)
        {
        	try
        	{
        	var retrievedDiv = document.getElementById('SVMXC__Picked_Qty__c_' + lineDetailId);
			retrievedDiv.innerHTML = actualModel.orderLines[lineDetailId].SVMXC__Picked_Qty__c;
			}catch(err){}
        }
        function updateUISerialNumberStatus(lineDetailId, SerialNumber, Status)
        {
        	try
        	{
        	var retrievedDiv = document.getElementById('Status_' + lineDetailId + ':' + SerialNumber);
			retrievedDiv.innerHTML = Status;
			}catch(err){}
        }
        
        // Identify the serial number and do the following
        //  Set received to true
        //  Increment the received count on line
        function onblurSerialSelection(elementId)
        {
        	actualModel.availableOrderLines = new Array();
        	var item = document.getElementById(elementId);
        	var dontFadeErrorMessage = false;
        	if(actualModel.errorMessage != null && actualModel.errorMessage != "")
        	{
        		dontFadeErrorMessage = true;
	        	actualModel.errorMessage = "";
       		}
       		else
       		{
	       		hideMessage('FADEOUT');
       		}
        	
        	if(item.value == null || item.value == '')
        	{
        		var itemProduct = document.getElementById('productcode');
                // Clear the serial number only if product is not available
                item.value = APL003_TAG004;
                if(isPartialRecordsDisplayed == true && (itemProduct.value == null || itemProduct.value == '' || itemProduct.value == '{!$Label.APL003_TAG005}'))
                	showAllLines();
        	}
        	else
        	{
        		var itemAvailableProduct = document.getElementById('lstAvailableProduct');
        		itemAvailableProduct.options.length = 0;
       			$('#serialnumber').addClass('serialNumberLoader');
	        	var requestedSerialNumbers = new Array();
        		var unprocessedSerialNumbers = '';
                if(Browser.Version() == 8)
                	requestedSerialNumbers = item.value.split('\r\n');
                else
                	requestedSerialNumbers = item.value.split('\n');
	        	actualModel.availableOrderLines = new Array();
	        	if(requestedSerialNumbers.length > 0)
	        	{
		        	var mode = "SINGLE";
		        	if(requestedSerialNumbers.length > 1)
		        		mode = "MULTIPLE";
		        	for(var serialNumberCount = 0; serialNumberCount < requestedSerialNumbers.length; serialNumberCount++)
			        {
			        	var isSerialNumberFound = selectSerialNumberAction(requestedSerialNumbers[serialNumberCount], mode);
			        	if(isSerialNumberFound == false)
			        	{
		        			if(unprocessedSerialNumbers != '')
                            {
                            	if(Browser.Version() == 8)
                                unprocessedSerialNumbers += '\r\n';
                                else
                                unprocessedSerialNumbers += '\n';
                            }
			        		unprocessedSerialNumbers += requestedSerialNumbers[serialNumberCount]
			        	}
			        }
		        	var itemSerialNumber = document.getElementById('serialnumber');
		        	if(unprocessedSerialNumbers != null && unprocessedSerialNumbers != '')
		        		itemSerialNumber.value = unprocessedSerialNumbers;
		        	else
		        	{
		        		if(itemAvailableProduct.options.length == 0)
		        			itemSerialNumber.value = APL003_TAG004;
		        		else
		        		{
		        			// Donot remove the serial number value
		        		}
		        	}
			        //Show error message, saying the following serial numbers cannot be added
			        /*
			        if(actualModel.errorMessage != null && actualModel.errorMessage != "")
			        {
			        	actualModel.errorMessage = '{!$Label.APL002_TAG035}' + actualModel.errorMessage;
			        	if(dontFadeErrorMessage == true)
			        		showError(actualModel.errorMessage)
			        	else
			        		showError(actualModel.errorMessage, 'FADEIN');
			        }*/
			        // If only serial selection, it would have added the available order lines
			        //if(actualModel.availableOrderLines.length > 0)
			        	//showLinesForSerialNumber(actualModel.availableOrderLines);
		        }
				removeSNProcessing();
	        }
	        /*
	        if((actualModel.errorMessage == null || actualModel.errorMessage == "") && dontFadeErrorMessage == true)
				hideMessage('FADEOUT');*/
		}
        
        function removeSNProcessing()
        {
        	$('#serialnumber').removeClass('serialNumberLoader');
        }
        
		function selectSerialNumberAction(selectedSerialNumber, mode)
        {
	        var itemProduct = document.getElementById('productcode');
	        showProductTextBox();
            //serialselectionholder.fnFilter(item.value, 0);
            if(selectedSerialNumber != null && selectedSerialNumber != '' && itemProduct.value != null && itemProduct.value != '' && itemProduct.value != '{!$Label.APL003_TAG005}')
            {
                var isAvailable = false;
                var errorMessage = "";
                // Reset the selected line
                var availableLines = new Array();
                if((actualModel.selectedProduct == null && actualModel.currentSelectedLine != null) || SVMXContains(actualModel.selectedProduct, actualModel.currentSelectedLine) == true)
                {
                	availableLines[0] = actualModel.currentSelectedLine;
                }
                else
                {
                	availableLines = actualModel.selectedProduct;
                }
                // Check whether requested serial number is equal to 1st element on the serial selection table
                for (var selectedProductCount = 0; selectedProductCount < availableLines.length; selectedProductCount++)
                {
                    if(actualModel.serialNumbers[availableLines[selectedProductCount]] != null)
                    if(actualModel.serialNumbers[availableLines[selectedProductCount]][selectedSerialNumber] != null)
                    {
                    	/* This function is removed since we are no longer handling serial number validation on client 
                    	if(isSerialNumberAvailableinProductStock(availableLines[selectedProductCount], selectedSerialNumber) == true)
                    	{
                    		if(errorMessage != "")
                    			errorMessage += ", ";
                    		errorMessage += actualModel.orderLines[availableLines[selectedProductCount]]['SVMXC__Product__r.Name'] + '(' + selectedSerialNumber + ')';
                    		actualModel.errorMessage += errorMessage;
                    		return false;
                    	}*/
                        // Update the retrieved count
                        var lineDetailId = availableLines[selectedProductCount];
                        incrementReceivedQuantity(lineDetailId, selectedSerialNumber)
                        isAvailable = true;
                        break;
                    }
                }
                if(errorMessage != null && errorMessage != "")
                	actualModel.errorMessage = errorMessage;
                // If serial number is not available, add it
                if(!isAvailable && actualModel.process.SVMXC__APL_Action_On_Unexpected_SN__c == 'ADD')
                {
                    for (var selectedProductCount = 0; selectedProductCount < availableLines.length; selectedProductCount++)
                    {
                        if(availableLines[selectedProductCount] != null)
                        {
	                        if(isSerialNumberAvailableinProductStock(availableLines[selectedProductCount], selectedSerialNumber) == true)
	                    	{
	                    		actualModel.errorMessage += actualModel.orderLines[availableLines[selectedProductCount]]['SVMXC__Product__r.Name'] + '(' + selectedSerialNumber + ')';
	                    		return false;
	                    	}
                            // Update the retrieved count
                            var isValid = onlyIncrementReceivedQuantity(availableLines[selectedProductCount])
                            if(isValid == true)
                            {
                                addNewSerialNumber(availableLines[selectedProductCount], selectedSerialNumber);
                            }
                            break;
                        }
                    }
                }
                // If there is no selected line available
                if(actualModel.currentSelectedLine == null)
                {
	                initiateProductReceipt(itemProduct.value, true);
                }
                else
                {
                	buildSerialNumberUI(actualModel.currentSelectedLine);
                }
                // Clear the product and serial number
                //selectedSerialNumber = APL003_TAG005;
                //itemProduct.value = 'APL003_TAG004';
                //itemProduct.focus();
            }
            else if(selectedSerialNumber != null && selectedSerialNumber != '' && (itemProduct.value == null || itemProduct.value == '' || itemProduct.value == '{!$Label.APL003_TAG005}'))
            {
            	// Find whether the serial number is available
            	if(isNotNull(actualModel.mapSerialRmaLines, selectedSerialNumber))
            	{
            		var availableOrderLines = actualModel.mapSerialRmaLines[selectedSerialNumber];
            		if(availableOrderLines.length > 0)
            		{
            			var selectedLine;
            			if(availableOrderLines.length == 1)
            			{
            				if(isSerialNumberAvailableinProductStock(availableOrderLines[0], selectedSerialNumber) == true)
	                    	{
	                    		actualModel.errorMessage += actualModel.orderLines[availableOrderLines[0]]['SVMXC__Product__r.Name'] + '(' + selectedSerialNumber + ')';
	                    		return false;
	                    	}
            				incrementReceivedQuantity(availableOrderLines[0], selectedSerialNumber);
            				actualModel.availableOrderLines.push(availableOrderLines[0]);
            			}
            			else
            			{
            				lstAvailableProduct.options.length = 0;
	        				var optionCursor = 1;
	        				for (var prodCount = 0; prodCount < availableOrderLines.length; prodCount++)
	        				{
	        					if(isSerialNumberAvailableinProductStock(availableOrderLines[prodCount], selectedSerialNumber) == true)
		                    	{
		                    		actualModel.errorMessage += actualModel.orderLines[availableOrderLines[prodCount]]['SVMXC__Product__r.Name'] + '(' + selectedSerialNumber + ')';
		                    		continue;
		                    	}
            					actualModel.availableOrderLines.push(availableOrderLines[prodCount]);
            					if(actualModel.serialNumbers[availableOrderLines[prodCount]][selectedSerialNumber].isReceived == null || actualModel.serialNumbers[availableOrderLines[prodCount]][selectedSerialNumber].isReceived == 'false')
            					{
            						selectedLine = availableOrderLines[prodCount];
	        						lstAvailableProduct.options[optionCursor] = new Option(getProductNameForLine(availableOrderLines[prodCount]), availableOrderLines[prodCount]);
	        						optionCursor++;
	        					}
		        			}
		        			if(lstAvailableProduct.options.length == 2)
		        			{
	            				incrementReceivedQuantity(selectedLine, selectedSerialNumber);
	            				actualModel.availableOrderLines.push(selectedLine);
            				}
            				else if(lstAvailableProduct.options.length > 0 && lstAvailableProduct.options.length != 2)
            				{
            					if(mode != "SINGLE")
            						return false;
		        				showProductPicklist();
		        				lstAvailableProduct.options[0] = new Option('{!$Label.APL002_TAG034}', 'NONE');
	        				}
            			}
            			return true;
            		}
            		else
            			return false;
            	}
            	else
            		return false;
            }
        }
        
        function clearProductCode()
        {
            var item = document.getElementById('productcode');
            item.value = APL003_TAG005;
        }
        function onfocusProductSelection(elementId)
        {
            var item = document.getElementById(elementId);
            if(item.value == APL003_TAG005)
                item.value ='';
        }
        
        function onfocusSerialSelection(elementId)
        {
            var item = document.getElementById(elementId);
            if(item.value == APL003_TAG004)
                item.value ='';
        }
        
        function findProductAvailability(productName)
        {
            return response = sforce.connection.query("Select Id, Name, ProductCode from Product2 where  Name = '" + productName + "'");
        }
        
        function selectProductForSerialNumber(availableProduct)
        {
        	var availableProductOptions = document.getElementById(availableProduct);
        	if (availableProductOptions.selectedIndex != -1)
        	{
        		var itemSerialNumber = document.getElementById('serialnumber');
        		incrementReceivedQuantity(availableProductOptions.options[availableProductOptions.selectedIndex].value, itemSerialNumber.value);
        		itemSerialNumber.value = APL002_TAG007;
        		showProductTextBox();
        	}
        }
        </script>
        
<!--         <apex:includeScript value="{!URLFOR($Resource.SVMX_AJAX_Library, 'SVMX_AJAX_Library.js')}"/> -->
        <div class="container">
        	<div id="SVMXerrorConsole" class="mainContainer" style="display:none">
                <div  class="processContent">
                    <span id="errorMessage" style="font-weight:bold;color:red"></span>
                    <span id="showMessage" style="font-weight:bold;color:black"></span>
                    <div class="closeLink"><a href="#" onclick="hideMessage();">{!$Label.COMM001_TAG065}</a></div>
                </div>
            </div>
            <div id="SVMXloader" class="SVMXloader" style="display:none">
				<span id="SVMXloaderMessage" style="font-weight:bold;color:black">{!$Label.COMM001_TAG041}</span>
          	</div>
          	<div id="onlyCancel" class="mainContainer processContent" style="display:none">
            	<div class="consolLinks">
                     <div class="consoleBtnH"> 
            			<input type="button" class="buttonH" value="{!$Label.APL003_TAG025}" onclick="invokeCancel()"/>
           			</div>
       			</div>
            </div>
            <div id="SVMXcontentArea" class="mainContainer processContent" style="display:none">
            	<div class="processtitle"><span id="processtitle"></span><span>: </span><span id="documentname" class="valueH"></span></div>
                <div class="consolLinks">
                    <div class="consoleBtnH">                         
                        <input type="button" class="buttonH" value="{!$Label.APL002_TAG043}" onclick="doPreSaveUpdate()"/> <!-- doPreSaveUpdate(false) --> 
                        <input type="button" class="buttonH" value="{!$Label.COMM001_TAG040}" onclick="invokeCancel()"/>
<!--                         <input type="button" class="buttonH" value="Custom Links" />  -->
<!--                         <input type="button" class="buttonH" value="Countinue Later"/> -->
    <!--                     <input type="button" class="buttonH" value="Test Generic Call" onclick="testData()"/> -->
    <!--                     <apex:flash id="DC" src="{!$Resource.GenericFlexConnector}" height="200" width="200" flashvars="sessionId={!$Api.Session_ID}&serverURL={!$Api.Partner_Server_URL_90}"></apex:flash> -->
                         
                    </div>
                    <div class="helpLink"><a href="{!$Label.APL002_HLPURL}" target="_blank">{!$Label.APL002_TAG025}</a></div>
                </div>
            <div class="mainContainer" style="padding:5px">
                <div class="processContent" style="padding:5px">
                    <div class="docDetails">
                        <ul>
                            <li><span>{!$Label.APL002_TAG004}</span> <span id="depotname" class="valueH"></span></li>
                            <li ><span>{!$Label.APL002_TAG005} </span> <span id="receivinglocation" class="valueH"></span></li>
                            <li class="last"><span class="fieldsH">{!$Label.APL002_TAG046}</span> <span id="orderstatus" class="valueH"></span></li>
                        </ul>
                    </div>
                    <div class="orderStatus">
                            <ul>
                                <li id="docattribute1"></li>
                                <li id="docattribute2"></li>
                                <li id="docattribute3"></li>
                            </ul>
                    </div>
                </div>
                
                <div class="serialNoContent">
                    <div class="serialnoTxt">{!$Label.APL002_TAG006}</div>
                    <div class="serialFieldContent">
<!--                         <div class="productCode"><input type="text" id="productcode" name="productcode" onblur="onblurProductSelection(this.id)" onfocus="onfocusProductSelection(this.id)" value="{!$Label.APL002_TAG008}" class="inputBox" style="width:420px" /></div> -->
<!--                         <div class="productHelp">?</div> -->
<!--                         <div class="serialNo"><input type="text" id="serialnumber" name="serialnumber" onblur="onblurSerialSelection(this.id)" onfocus="onfocusSerialSelection(this.id)" value="{!$Label.APL002_TAG007}" class="inputBox" style="width:420px" /></div> -->
                        <div id="productCodeContainer" class="productCode"><input type="text" id="productcode" name="productcode" onblur="onblurProductSelection(this.id)" onfocus="onfocusProductSelection(this.id)" value="{!$Label.APL002_TAG008}" class="inputBox" style="width:60%" /></div>
                        <div id="availableProductContainer" style="display:none" class="productCode"><select id="lstAvailableProduct" class="selectBoxH" onchange="selectProductForSerialNumber(this.id)"></select></div>
                        <div class="serialNo"><textarea id="serialnumber" name="serialnumber" class="serialTxtArea" onblur="onblurSerialSelection(this.id);" onfocus="onfocusSerialSelection(this.id)" value="{!$Label.APL002_TAG007}">{!$Label.APL002_TAG007}</textarea></div>
                    </div>
                </div>
                
                <div class="prdContentTbl">
                    <div class="filterFields">
                        <div class="fieldsContentH">
                        </div>
                        <div class="tablesH">
                            <div id="rmadetails" class="prdDetailsTbl">
                                <table width="100%" id="tablermadetails">
                                </table>
                            </div>
                            <div class="serialNosTbl">
                                <div class="headingTxt">{!$Label.APL002_TAG012}</div>
                                <div id="serialSelection" class="clear">
                                    
                                </div>
                            </div>
                        </div>
                    </div>                  
                </div>
            </div>
            </div> 
        </div>
        <script type="text/javascript">
			var isFirstCall = true;
			function showError(message)
			{
				var uiComp = document.getElementById('errorMessage');
				uiComp.innerHTML = message;
				uiComp = document.getElementById('SVMXerrorConsole');
				uiComp.style.display = 'block';
			}
			
			function loadData()
            {
                debugger;
                if(localStorage.getItem("actualModel" + processId + recordId))
                {
                    actualModel = getLocalStorage("actualModel" + processId + recordId);
                    
                    if(confirm("{!$Label.APL002_TAG036}"))loadFromMemory();
                    else
                    {
                    	removeLocalStorage("actualModel" + processId + recordId);
                    	loadFromServer();
                    }
                }
                else
                {
                    loadFromServer();
                }
            }
            
            function loadFromServer()
            {
            	//console.log(sforce);
                var valueMap = [new SVMXMap("SVMX_processId", processId), new SVMXMap("SVMX_recordId", recordId), new SVMXMap("SVMX_processType", "PICKNMOVE")];
                var request = new INTF_SFMRequest('', 'INITIALSYNC', valueMap, null);
                sr.errorHandler = {handler : function(me)
	            {
	            	SVMXloader.loaded();
                    showError('{!$Label.COMM001_TAG070}' + me.status + ' :' + me.responseText);
                    return false;
	            }}
                sr.responseHandler = {handler : function(e, me)
                {
                    var result = sr.__getResponse(me);
                    for (var j=0; j< result.length; j++)
                    {
                        debugger;
                        if(result[j].success == 'true')
                        {
                            if(result[j].aplOrder != null)
                            {
                                actualModel.process = result[j].aplOrder.svmxProcess;
                               	actualModel.header = result[j].aplOrder.orderHdrRecord;
                                if(isFirstCall == true)
                                {
                                 	// Populate the config data from server
                                	sui = new SVMXUIActualModel({searchFields : actualModel.productsearchfields, isRelatedTable: true, isAdditionalInfoAvailable: true, isSecondarySearchAllowed: true});
                                	isFirstCall = false;
                                }	
                                if(result[j].aplOrder.orderLines != null)
                                	sui.__buildModel(result[j].aplOrder.orderLines);
                                sui.__populateConfigurationInformation(result[j].valueMap);
                                actualModel.orderLinefields = sui.gridFields;
                                actualModel.serialNumbers = sui.relatedData;
                                actualModel.mapProductRmaLines = sui.mapFilterData;
                                actualModel.orderLines = sui.gridData;
                                actualModel.mapKeyValue = sui.mapKeyValue;
                                actualModel.mapKeyValues = sui.mapKeyValues;
                                actualModel.mapSerialRmaLines = sui.mapSecondaryPrimary;
                            }
                            if(actualModel.mapKeyValues != null && actualModel.mapKeyValues['LINEIDS'] != null)
                            {
                            	var valueMap = [new SVMXMap("SVMX_processId", processId), new SVMXMap("SVMX_recordId", recordId), new SVMXMap("SVMX_processType", "PICKNMOVE"), new SVMXMap("SVMX_BATCHIDS", "", null, null, actualModel.mapKeyValues['LINEIDS'])];
                				var request = new INTF_SFMRequest('', 'BATCHCALL', valueMap, null);
                				actualModel.mapKeyValues = new Array();
                    			sui.mapKeyValues = new Array();
                				sr.invoke("INTF_APL_GetOrder_WS", request);
                            }
                            else
                            {
                            	postBuildData();
                            }
                        }
                        else
                        {
                        	SVMXloader.loaded();
                        	showContainer('onlyCancel');
                            showError(result[j].message);
                            break;
                        }
                        /*// Populate empty serial selection UI
                        populateSerialSelectionforProduct('');
                        buildDataTableUI();
                        var uiComp = document.getElementById('SVMXcontentArea');
                        uiComp.style.display = 'block';*/
                    }
                }}
                sr.invoke("INTF_APL_GetOrder_WS", request);
            }
            
            function postBuildData()
            {
            	SVMXloader.loaded();
                var uX = new UIDesigner({UIElement: 'rmadetails', paintFields: sui.gridFields, displayRecords: sui.gridData});
                uX.__paintGridUI();
                // Populate header details
                uX.__paintElementUI({depo: {UIid: 'depotname', field: 'DEPOTNAME'}, receivinglocation: {UIid: 'receivinglocation', field: 'RECEIVINGLOCATION'}}, sui.gridHeaderData);
                uX.__paintElementUI({title: {UIid: 'processtitle', field: 'SVMXC__ProcessID__c'}}, actualModel.process);
                uX.__paintElementUI({documentname: {UIid: 'documentname', field: 'Name'}, orderstatus: {UIid: 'orderstatus', field: 'SVMXC__Order_Status__c'}}, actualModel.header);
                // Populate empty serial selection UI
                populateSerialSelectionforProduct('');
                buildDataTableUI();
                showContent();
            }
            SVMXloader.action = 'loadData';
           	SVMXloader.loadWithMessage('{!$Label.APL002_TAG044}..');
            
			function loadTags()
            {
                var txtt = "{!$Label.COMM001_TAG031}";
                var showingTxt = "{!$Label.COMM001_TAG032}";
                var toTxt = "-";
                var ofTxt = "/";
                var entriesTxt = "{!$Label.COMM001_TAG033}"
                var noDataTable = "";
                $("span#showLang").text(txtt);
                $("span#entries2").text(entriesTxt);
                $("span#showingTxt").text(showingTxt);
                $("span#showingTxt2").text(showingTxt);
                $("span#toTxt").text(toTxt);
                $("span#ofTxt").text(ofTxt);
                $("span#toTxt2").text(toTxt);
                $("span#ofTxt2").text(ofTxt);
                $("span#entries2").text(entriesTxt);
                $("span#entriesTxt").text(entriesTxt);
                $("span#entriesTxt2").text(entriesTxt);
                $("span#tablermadetails_first").text("{!$Label.COMM001_TAG024}");
                $("span#tablermadetails_previous").text("{!$Label.COMM001_TAG026}");
                $("span#tablermadetails_next").text("{!$Label.COMM001_TAG025}");
                $("span#tablermadetails_last").text("{!$Label.COMM001_TAG027}");
                $("span#noMatchingRecords").text("");
                $("span#noDataTable").text(noDataTable);
            }

			
			function buildDataTableUI()
            {
                rmadetailholder = $('#tablermadetails').dataTable({
                    "sPaginationType": "full_numbers",
                    "bSort": false
                });
                instantiateClickInterface();
                loadTags();
                var txtt = "{!$Label.APL003_TAG028}";
                
                
                // Code for apply filter
                var applyTxt = '{!$Label.APL003_TAG016}';
                var inputTxtVal = $(".dataTables_filter label input:text").attr("value", applyTxt);
                var inputBoxVal = inputTxtVal.val();
                
                $('table#tablermadetails').wrap('<div class="tablewrapper" />');
                searchInput = $('.dataTables_filter label input:text');
                searchDefault = inputBoxVal;
                
                searchInput.click(function () {
                    if($(this).val() == searchDefault)
                        $(this).val('');
                });
                
                searchInput.blur(function () {
                    if($(this).val() == '')
                        $(this).val(searchDefault);
                });
            }
            
            function instantiateClickInterface()
        	{
	            $('#tablermadetails thead>tr>th').unbind('click');
	                var trInstance = $('table#tablermadetails tbody').find('tr');
	                trInstance.click(function(){
	                    trInstance.removeClass('activetr');
	                    var instance = $(this);
	                    instance.addClass('activetr');
	                    if(actualModel.orderLines[this.id] != null)
	                    {
	                    	actualModel.currentSelectedLine = this.id;
	                        var prdCode = document.getElementById('productcode');
	                        if(prdCode.value != actualModel.orderLines[this.id]['SVMXC__Product__r.ProductCode'])
	                        {
	                        	prdCode.value = actualModel.orderLines[this.id]['SVMXC__Product__r.ProductCode'];
	                        	onblurProductSelection('productcode');
	                        }
	                        buildSerialNumberUI(this.id);
							loadTags();
	                    }
	            });
	            
	            var onCountOptionChange = $('#tablermadetails_length')
	            onCountOptionChange.change(function () {
	            	var trInstance = $('table#tablermadetails').find('tr');
	            	trInstance.removeClass('activetr');
	                instantiateClickInterface();
	            });
	            
	            var onPageChange = $('span[class^="paginate"]')
	            onPageChange.click(function () {
	            	var trInstance = $('table#tablermadetails').find('tr');
	            	trInstance.removeClass('activetr');
	                instantiateClickInterface();
	            });
	            
	            var onPageChange2 = $('span[id^="tablermadetails"]')
	            onPageChange2.click(function () {
	            	var trInstance = $('table#tablermadetails').find('tr');
	            	trInstance.removeClass('activetr');
	                instantiateClickInterface();
	            });
	            
	            var onFilterChange = $('.dataTables_filter').find('input');
	            onFilterChange.blur(function () {
	            	var trInstance = $('table#tablermadetails').find('tr');
	            	trInstance.removeClass('activetr');
	                instantiateClickInterface();
	            });
	        }
        </script>
        <script>
        function invokeCancel()
        {
        	top.location = "{!JSENCODE($CurrentPage.parameters.SVMX_retURL)}";
        }
        function invokeDone()
        {
        	if('{!JSENCODE($CurrentPage.parameters.SVMX_NxtStepID)}' != '')
        	{
	        	SVMXBGProcessor.nextProcessId = '{!JSENCODE($CurrentPage.parameters.SVMX_NxtStepID)}';
	        	SVMXBGProcessor.currentRecordId = '{!RIGHT($CurrentPage.parameters.SVMX_retURL, 18)}';
	        	SVMXBGProcessor.load();
        	}
        	else
        	{
        		top.location = "{!JSENCODE($CurrentPage.parameters.SVMX_retURL)}";
        	}	
        }
        
        function invokeSaveAndShipCall()
        {
        	top.location = "/apex/APL_ConfirmShipment?SVMX_recordId={!RIGHT($CurrentPage.parameters.SVMX_recordId, 18)}&SVMX_retURL={!JSENCODE($CurrentPage.parameters.SVMX_retURL)}&SVMX_processId={!RIGHT($CurrentPage.parameters.SVMX_processId, 18)}";
        }
        var isSavedOnce = false;
        function trySavingOnce()
        {
        	isSavedOnce = true;
        	doSave();
        }
        
        function doSave()
        {
            var aplHeader = actualModel.header;
            var aplOrderLines = new Array();
           	var aplOrderLineIds = new Array();
            var count = 0;
            var arrRequest = [];
            var syncEventCount = 0;
            var totalLineCount = 0;
            var processingCount = 0;
           	SVMXloader.loadWithMessage('{!$Label.APL002_TAG037}' + '{!$Label.COMM001_TAG042}');
           	for(recordKey in actualModel.splitedOrderLines)
            {
            	count++;
            	totalLineCount++;
            	var serialNumbers = new Array();
            	var serialNos = actualModel.serialNumbers[recordKey];
            	serialNumbers.push(serialNos);
            	
            	var orderLine = actualModel.splitedOrderLines[recordKey];
             	// If line has some error associated donot add the line
                if(isSavedOnce == true && SVMXContains(actualModel.oncePushableIds, orderLine.Id) == false)
                	continue;
                var orderLineUniqueId = orderLine.Id;
                aplOrderLineIds.push(orderLineUniqueId);
                if(orderLine.Id != null && (orderLine.Id).indexOf('UNIQUE') != -1)
                    orderLine.Id = null;
                if(actualModel.additionalInformation[recordKey] != null)
                    aplOrderLines.push(new APL_OrderLineCollection(serialNumbers, orderLine, null, false, false, actualModel.additionalInformation[recordKey].clonedFromId));
                else
                    aplOrderLines.push(new APL_OrderLineCollection(serialNumbers, orderLine, null, false, false));
                if((count == actualModel.batchCount && isSavedOnce == false) || (count == actualModel.batchCount && isSavedOnce == true && aplOrderLines.length > 0) )
                {
                	var aplOrder = new APL_Order(aplHeader, null, aplOrderLines, null);
		            var valueMap = [new SVMXMap("SVMX_processId", processId), new SVMXMap("SVMX_recordId", recordId), new SVMXMap("SVMX_processType", "PICKNMOVE")];
		           	var request = new INTF_SFMRequest('EVENT' + syncEventCount, '', valueMap, aplOrder);
		            arrRequest[arrRequest.length] = {
                    props : {orgNameSpace: "SVMXC", sessionId : __sfdcSessionId, endPointName: "INTF_WebServicesDef"}, 
                                methodName : "INTF_APL_SaveOrder_WS", data : request , options : {async: false}};
                    actualModel.syncEvents['EVENT' + syncEventCount] = aplOrderLineIds;
                	// Reset data
                	syncEventCount++;
                	aplOrderLines = new Array();
                	aplOrderLineIds = new Array();
                	count = 0;
                }    
            }
            // If count is less than the batch, it will not create the request for last partial batch. To solve this we have added this code
            if((count> 0 && count != actualModel.batchCount  && isSavedOnce == false) || (count> 0 && count != actualModel.batchCount && isSavedOnce == true && aplOrderLines.length > 0))
            {
				var aplOrder = new APL_Order(aplHeader, null, aplOrderLines, null);
				var valueMap = [new SVMXMap("SVMX_processId", processId), new SVMXMap("SVMX_recordId", recordId), new SVMXMap("SVMX_processType", "PICKNMOVE")];
				var request = new INTF_SFMRequest('EVENT' + syncEventCount, '', valueMap, aplOrder);
				arrRequest[arrRequest.length] = {
				   props : {orgNameSpace: "SVMXC", sessionId : __sfdcSessionId, endPointName: "INTF_WebServicesDef"}, 
							   methodName : "INTF_APL_SaveOrder_WS", data : request , options : {async: false}};
				actualModel.syncEvents['EVENT' + syncEventCount] = aplOrderLineIds;
				// Reset data
				syncEventCount++;
               	aplOrderLines = new Array();
               	aplOrderLineIds = new Array();
			}
            if(arrRequest.length > 0)
			{
				processingCount += (count > 0 ) ? count : actualModel.batchCount;
	            SVMXloader.loadWithMessage('{!$Label.APL002_TAG039}' + '(' + processingCount + ' / ' + totalLineCount + ')...');
	            actualModel.oncePushableIds = new Array();
	            
	            var srSave = new SOAPRequestCollection(arrRequest);
	            srSave.requestCount = arrRequest.length;
	            srSave.allSuccess = true;
	            srSave.errorHandler = {handler : function(me)
	            {
	            	SVMXloader.loaded();
	            	showError('{!$Label.APL002_TAG040}' + me.status + ' :' + me.responseText);
	                return false;
	            }}
	            srSave.responseHandler = {handler : function(me)
	            {
	            	var allResponses = srSave.getAllResponses();
	            	var isAllSuccess = true;
	                for(var resp in allResponses)
	                {
	                	var result = sr.__getResponse(allResponses[resp]);
	                	for (var j=0; j< result.length; j++)
	                	{
	                		if(actualModel.syncEvents[result[j].eventName] == null)
	                			continue;
	                		
	            			SVMXloader.loadWithMessage('{!$Label.APL002_TAG039}' + '(' + processingCount + ' / ' + totalLineCount + ')...');
	                		srSave.requestCount--;
	                		processingCount += (actualModel.syncEvents[result[j].eventName].length) ? actualModel.syncEvents[result[j].eventName].length : 1;
		                    if(result[j].success == 'true')
		                    {
		                    	var lstSentIds = actualModel.syncEvents[result[j].eventName];
		                    	for (var k = 0; k < lstSentIds.length; k++)
	                    		{
	                    			delete actualModel.orderLines[lstSentIds[k]];
		                    	}
		                    	
		                    }
		                    else
		                    {
		                    	srSave.allSuccess = false;
		                    	if(result[j].message != null && result[j].message != '')
		                    	{
		                    		actualModel.persistentData[result[j].eventName] = result[j].message;
		                    	}
		                    	else if(result[j].errors )
		                    	{
		                    		var lstErrors = new Array();
		                    		if(!result[j].errors.length)
		                    			lstErrors = [result[j].errors];
		                    		else
		                    			lstErrors = result[j].errors;
		                    		for (var k = 0; k < lstErrors.length; k++)
		                    		{
		                    			actualModel.persistentData[lstErrors[k].uniqueId] = lstErrors[k].errorMsg;
		                    		}
			                    	var lstSentIds = actualModel.syncEvents[result[j].eventName];
			                    	for (var k = 0; k < lstSentIds.length; k++)
		                    		{
		                    			if(actualModel.persistentData[lstSentIds[k]] == null)
			                    			actualModel.oncePushableIds.push(lstSentIds[k]);
			                    	}
		                    	}
		                    }
		                    delete actualModel.syncEvents[result[j].eventName];
		                    console.log(srSave.requestCount);
	                    }
	                }
	                
	                if(srSave.requestCount == 0)
	                {
	                	if(srSave.allSuccess == true)
	                	{
	                		// If there is errors previously occured, update the actual model and local cache as well
	                		if(isSavedOnce == true)
	                		{
	                			setLocalStorage("actualModel"+processId + recordId, actualModel);
		           			}
	                		else if(localStorage.getItem("actualModel" + processId + recordId))
	                		{
	                			// If there is no errors and if local data exist clear on next sucessful save
	                    		removeLocalStorage("actualModel" + processId + recordId);
	                    		performHeaderSave();
	                    		//invokeDone();
	                    	}
	                    	else
	                    	{
	                    		performHeaderSave();
	                    		//invokeDone();
	                    	}
	                    }
	                    else
	                    {
	                		if(isSavedOnce == true)
	                		{
	                			setLocalStorage("actualModel"+processId + recordId, actualModel);
	                		}
	                		else
	                		{
	                			if(actualModel.oncePushableIds == null || actualModel.oncePushableIds.length == 0)
           							setLocalStorage("actualModel"+processId + recordId, actualModel);
	                    		someFailureOnSave();
	                    	}
	                    }
	                }
	            }}
	            window.setTimeout(srSave.invokeAll(),500);
            }
            else
            {
            	//invokeDone();
            	performHeaderSave();
            	//performCustomEvent('EVENT_AFTER PICKING', 'PICKNMOVE');
            }
        }
        function performHeaderSave()
        {
        	//console.log(sforce);
			var valueMap = [new SVMXMap("SVMX_processId", processId), new SVMXMap("SVMX_recordId", recordId), new SVMXMap("SVMX_processType", "PICKNMOVE")];
			var request = new INTF_SFMRequest('', '', valueMap, null);
			sr.errorHandler = {handler : function(e, me)
			{
				SVMXloader.loaded();
				showError('{!$Label.APL002_TAG040}' + me.status + ' :' + me.responseText);
				return false;
			}}
			sr.responseHandler = {handler : function(e, me)
			{
				var result = sr.__getResponse(me);
				for (var j=0; j< result.length; j++)
				{
					if(result[j].success == 'true')
					{
	                    performCustomEvent('EVENT_AFTER PICKING', 'PICKNMOVE');
					}
					else
					{
						showError(result[j].message);
					}
				}
			}}
			sr.invoke("INTF_APL_PartsOrderClosure_WS", request);
        }
        
        function someFailureOnSave()
        {
           	SVMXloader.loaded();
           	if(actualModel.oncePushableIds != null && actualModel.oncePushableIds.length > 0)
           	{
        		trySavingOnce();
        		showError('{!$Label.COMM001_TAG070}');
        	}
        	else
        	{
        		updateErrorForAllLines();
        		var errorMsg = '';
        		for(key in actualModel.persistentData)
        		{
        			if(key.indexOf('EVENT') != -1)
        			{
        				errorMsg += actualModel.persistentData[key];
        			}
        		}
        		errorMsg = '{!$Label.APL002_TAG040}' + (errorMsg != '') ? '\n' + ':' + errorMsg : '';
        		showError(errorMsg);
        	}
            return false;
        }
        
        function updateErrorForAllLines()
        {
        	var pushedKeys = new Object();
            for(key in actualModel.persistentData)
            {
            	var originalKey = key;
            	if(actualModel.orderLines[key] == null)
            	{
            		if(actualModel.additionalInformation != null && actualModel.additionalInformation[key] != null && actualModel.additionalInformation[key].clonedFromId != null)
            			key = actualModel.additionalInformation[key].clonedFromId;
            		else
            			continue;
            		if(actualModel.persistentData[key] == null)
            			actualModel.persistentData[key] = actualModel.persistentData[originalKey];
            	}
            	if(pushedKeys[key] == null)
            	{
	            	pushedKeys[key] = true;
	            	showErrorPopup(key);
				}
            }
        }
        
        function doPreSaveUpdate()
        {
        	SVMXloader.loadWithMessage('{!$Label.APL002_TAG043}');
            var aplHeader = actualModel.header;
            var aplOrderLines = new Array();
            var uniqueCount = 0;
            for(recordKey in actualModel.orderLines)
            {
                var serialNumbers = new Array();
                var serialNos = actualModel.serialNumbers[recordKey];
				var isFirstItem = true;
          		if(actualModel.orderLines[recordKey].SVMXC__Picked_Qty__c > 0)//if Actual Quantity is greater then one then need to do spliting..
          		{
					for(serialKey in serialNos)
					{
						var currentOrderLine = new Object;
                		currentOrderLine = JSON.parse( JSON.stringify( actualModel.orderLines[recordKey] ) );
						var selectedSerialNumber = serialNos[serialKey];
						// Donot send removed serial numbers to save
						if(!selectedSerialNumber.reconciliationAction || selectedSerialNumber.reconciliationAction != 'Remove')
						{
							//Expected and Picked..
    						if(selectedSerialNumber.isPicked != null && selectedSerialNumber.isPicked && selectedSerialNumber.isExpected != null && selectedSerialNumber.isExpected)
    						{
   								//Update the Exsisting PO Line Record..
  								currentOrderLine.SVMXC__Expected_Quantity2__c  = 1;
		    					currentOrderLine.SVMXC__Picked_Qty__c = 1;
		    					currentOrderLine.SVMXC__Serial_Number_List__c = selectedSerialNumber.serialNumber;
		    					currentOrderLine.SVMXC__Picked__c = true;
		    					currentOrderLine.Id = recordKey;
    							if(isFirstItem == true)
    							{
    								actualModel.splitedOrderLines[recordKey] = currentOrderLine;
    								actualModel.serialNumbers[recordKey] = selectedSerialNumber;
    								isFirstItem = false;
    							}
    							else
    							{
    								var uniqueId = 'UNIQUEID_' + uniqueCount;
    								uniqueCount++;
    								actualModel.splitedOrderLines[uniqueId] = currentOrderLine;
		    						currentOrderLine.SVMXC__Serial_Number__c = null;
		    						currentOrderLine.Id = uniqueId;
		    						actualModel.splitedOrderLines[uniqueId] = currentOrderLine;
		    						actualModel.serialNumbers[uniqueId] = selectedSerialNumber;
		    						
		    						//Setup additiona information
		    						var additionalInfo = new Object;
		    						additionalInfo.clonedFromId = recordKey;
		    						actualModel.additionalInformation[uniqueId] = additionalInfo;
    							}
    						}
    						// Not Expected but Picked
    						else if((selectedSerialNumber.isExpected == null || selectedSerialNumber.isExpected == 'false') && selectedSerialNumber.isPicked != null && selectedSerialNumber.isPicked == 'true')
    						{
   								//Update the Exsisting PO Line Record..
  								currentOrderLine.SVMXC__Expected_Quantity2__c  = 0;
		    					currentOrderLine.SVMXC__Picked_Qty__c = 1;
		    					currentOrderLine.SVMXC__Serial_Number_List__c = selectedSerialNumber.serialNumber;
		    					currentOrderLine.SVMXC__Picked__c = true;
		    					currentOrderLine.SVMXC__Serial_Number__c = null;
		    					
		    					if(isFirstItem == true)
    							{
    								actualModel.splitedOrderLines[recordKey] = currentOrderLine;
    								actualModel.serialNumbers[recordKey] = selectedSerialNumber;
    								isFirstItem = false;
    							}
    							else
    							{
    								var uniqueId = 'UNIQUEID_' + uniqueCount;
    								uniqueCount++;
    								currentOrderLine.Id = uniqueId;
		    						actualModel.splitedOrderLines[uniqueId] = currentOrderLine;
    								actualModel.serialNumbers[uniqueId] = selectedSerialNumber;
    								
    								//Setup additiona information
		    						var additionalInfo = new Object;
		    						additionalInfo.clonedFromId = recordKey;
		    						actualModel.additionalInformation[uniqueId] = additionalInfo;
    							}
    							
		    					//Setup additiona information
	    						var additionalInfo = new Object;
	    						additionalInfo.clonedFromId = recordKey;
	    						actualModel.additionalInformation[uniqueId] = additionalInfo;
    						}
    						// Expected but not Picked
    						else if((selectedSerialNumber.isExpected != null && selectedSerialNumber.isExpected == 'true') && (selectedSerialNumber.isPicked == null || selectedSerialNumber.isPicked == 'false'))
    						{
    							currentOrderLine.SVMXC__Picked__c = false;
   								currentOrderLine.SVMXC__Serial_Number_List__c = selectedSerialNumber.serialNumber;
	    						currentOrderLine.SVMXC__Expected_Quantity2__c = 1;
		    					currentOrderLine.SVMXC__Picked_Qty__c = 0;
   								currentOrderLine.SVMXC__Serial_Number__c = null;
    							selectedSerialNumber.isPicked = false;
    							
    							if(isFirstItem == true)
    							{
    								actualModel.splitedOrderLines[recordKey] = currentOrderLine;
    								actualModel.serialNumbers[recordKey] = selectedSerialNumber;
    								isFirstItem = false;
    							}
    							else
    							{
    								var uniqueId = 'UNIQUEID_' + uniqueCount;
    								uniqueCount++;
    								currentOrderLine.Id = uniqueId;
		    						actualModel.splitedOrderLines[uniqueId] = currentOrderLine;
    								actualModel.serialNumbers[uniqueId] = selectedSerialNumber;
    								
    								//Setup additiona information
		    						var additionalInfo = new Object;
		    						additionalInfo.clonedFromId = recordKey;
		    						actualModel.additionalInformation[uniqueId] = additionalInfo;
    							}
    						}
						}
					}
          		}
          		else
          		{
          			//actualModel.splitedOrderLines[recordKey] = currentOrderLine;
          		}
            }
            doSave();
        }
        
        // Check whether serial number is already available in stock, If so then its an invalid Serial Number
        function isSerialNumberAvailableinProductStock(lineId, SerialNumber)
        {
            return false;
        }
        function getProductNameForLine(lineId)
        {
        	if(actualModel.orderLines[lineId] != null)
        	{
	        	var prodName = actualModel.orderLines[lineId]['SVMXC__Product__r.Name']
	        	return prodName;
        	}
        	else
        	{
        		return '';
        	}
        }
        
        // Core reusable methods 
        function isNotNull(element, attribute) {
            if(element != null && element[attribute] != null)
            	return true;
            else
            	return false;
        }
        </script>
    </apex:form>
</apex:page>